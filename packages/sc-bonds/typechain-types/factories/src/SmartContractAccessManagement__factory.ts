/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SmartContractAccessManagement,
  SmartContractAccessManagementInterface,
} from "../../src/SmartContractAccessManagement";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "contractHash",
        type: "bytes32",
      },
    ],
    name: "DisableContract",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "contractHash",
        type: "bytes32",
      },
    ],
    name: "EnableContract",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "_contractsAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr_",
        type: "address",
      },
    ],
    name: "atReturningHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "contractHash_",
        type: "bytes32",
      },
    ],
    name: "disableContractFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "contractHash_",
        type: "bytes32",
      },
    ],
    name: "enableContractToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isCallerApprovedSmartContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061028f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063c2faae5911610050578063c2faae59146100c5578063d614284a146100cd578063d696fb0b146100e257600080fd5b8063806ba1001461006c578063a1962183146100a4575b600080fd5b61008f61007a366004610203565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100b76100b236600461021c565b6100f5565b60405190815260200161009b565b61008f610144565b6100e06100db366004610203565b610168565b005b6100e06100f0366004610203565b6101be565b60408051603f833b9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252818152600091808360208401863c50805160209091012092915050565b600080610150336100f5565b60009081526020819052604090205460ff1692915050565b60008181526020819052604090819020805460ff19166001179055517fbaf2f827de189827a9b5ea8781dbbffcad675a367dccaad8b9ada866795598d7906101b39083815260200190565b60405180910390a150565b60008181526020818152604091829020805460ff1916905590518281527f2876b9bd97a638025f28a0d50cb5f3cd9e5c0b85624fb7ee15267149452c2d7491016101b3565b60006020828403121561021557600080fd5b5035919050565b60006020828403121561022e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461025257600080fd5b939250505056fea26469706673582212205e248b261dca8451056dc3c3b39aea6bb805e6cf9ea0faac5d8bf54a69a3776264736f6c63430008110033";

type SmartContractAccessManagementConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SmartContractAccessManagementConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SmartContractAccessManagement__factory extends ContractFactory {
  constructor(...args: SmartContractAccessManagementConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SmartContractAccessManagement & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SmartContractAccessManagement__factory {
    return super.connect(runner) as SmartContractAccessManagement__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SmartContractAccessManagementInterface {
    return new Interface(_abi) as SmartContractAccessManagementInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SmartContractAccessManagement {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SmartContractAccessManagement;
  }
}

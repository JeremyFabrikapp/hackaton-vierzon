/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  BilateralTrade,
  BilateralTradeInterface,
} from "../../src/BilateralTrade";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRegister",
        name: "_register",
        type: "address",
      },
      {
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "enum ITrade.Status",
        name: "status",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "NotifyTrade",
    type: "event",
  },
  {
    inputs: [],
    name: "approve",
    outputs: [
      {
        internalType: "enum ITrade.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "buyerAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "details",
    outputs: [
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tradeDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "valueDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "executeTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDetails",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tradeDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "valueDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct ITrade.TradeDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymentID",
    outputs: [
      {
        internalType: "bytes8",
        name: "",
        type: "bytes8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "register",
    outputs: [
      {
        internalType: "contract IRegister",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sellerAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "buyer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tradeDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "valueDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct ITrade.TradeDetail",
        name: "_details",
        type: "tuple",
      },
    ],
    name: "setDetails",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "status",
    outputs: [
      {
        internalType: "enum ITrade.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011fe380380620011fe8339810160408190526200003491620002e7565b600160005560405163c41251a160e01b81523360048201526001600160a01b0383169063c41251a190602401602060405180830381865afa1580156200007e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a4919062000326565b806200011657506040516314aa469760e31b81523360048201526001600160a01b0383169063a55234b890602401602060405180830381865afa158015620000f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000116919062000326565b620001685760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d75737420626520612076616c696420696e766573746f720060448201526064015b60405180910390fd5b60405163c41251a160e01b81526001600160a01b03828116600483015283169063c41251a190602401602060405180830381865afa158015620001af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d5919062000326565b620002235760405162461bcd60e51b815260206004820152601e60248201527f4275796572206d75737420626520612076616c696420696e766573746f72000060448201526064016200015f565b60018054600280546001600160a01b03199081163317909155600480546001600160a01b03868116919093161790556001600160a81b0319909116908416179081905560ff600160a01b90910416600581111562000285576200028562000351565b604051600081526001600160a01b0383169033907fb04efa95c2e317d8afba4237350a971f1ce59ef6fbbf2eb3f1a7e3f3f106a8f49060200160405180910390a4505062000367565b6001600160a01b0381168114620002e457600080fd5b50565b60008060408385031215620002fb57600080fd5b82516200030881620002ce565b60208401519092506200031b81620002ce565b809150509250929050565b6000602082840312156200033957600080fd5b815180151581146200034a57600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b610e8780620003776000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80634dc415de11610081578063b787cfe61161005b578063b787cfe6146101c0578063d84ffb41146101d3578063fbbf93a01461020657600080fd5b80634dc415de1461014b578063565974d314610155578063835d2d2e146101a857600080fd5b80631aa3a008116100b25780631aa3a00814610113578063200d2ed214610126578063489147d71461013a57600080fd5b806310547851146100ce57806312424e3f146100fe575b600080fd5b6002546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610106610259565b6040516100f59190610d6d565b6001546100e1906001600160a01b031681565b60015461010690600160a01b900460ff1681565b6004546001600160a01b03166100e1565b6101536104e1565b005b60035460045460055460065460075461017894936001600160a01b031692919085565b604080519586526001600160a01b039094166020860152928401919091526060830152608082015260a0016100f5565b6101b06106fc565b60405190151581526020016100f5565b6101536101ce366004610d95565b6109ad565b6040517fffffffffffffffff0000000000000000000000000000000000000000000000003060c01b1681526020016100f5565b61020e610c85565b6040516100f59190600060a082019050825182526001600160a01b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b6002546000906001600160a01b03163314801561029357506000600154600160a01b900460ff16600581111561029157610291610d57565b145b1561041e576003546102ec5760405162461bcd60e51b815260206004820152601460248201527f7175616e74697479206e6f7420646566696e656400000000000000000000000060448201526064015b60405180910390fd5b60055461033b5760405162461bcd60e51b815260206004820152601660248201527f74726164652064617465206e6f7420646566696e65640000000000000000000060448201526064016102e3565b60065461038a5760405162461bcd60e51b815260206004820152601660248201527f76616c75652064617465206e6f7420646566696e65640000000000000000000060448201526064016102e3565b60018054819060ff60a01b1916600160a01b825b0217905550600154600160a01b900460ff1660058111156103c1576103c1610d57565b6004546002546003546040519081526001600160a01b0392831692909116907fb04efa95c2e317d8afba4237350a971f1ce59ef6fbbf2eb3f1a7e3f3f106a8f49060200160405180910390a450600154600160a01b900460ff1690565b6004546001600160a01b031633148015610454575060018054600160a01b900460ff16600581111561045257610452610d57565b145b1561047357600180546003919060ff60a01b1916600160a01b8361039e565b60405162461bcd60e51b815260206004820152603360248201527f7468652074726164652063616e6e6f7420626520617070726f76656420696e2060448201527f746869732063757272656e74207374617475730000000000000000000000000060648201526084016102e3565b6002600154600160a01b900460ff16600581111561050157610501610d57565b0361054e5760405162461bcd60e51b815260206004820152601660248201527f547261646520616c72656164792072656a65637465640000000000000000000060448201526064016102e3565b6002546001600160a01b03163314801561058657506004600154600160a01b900460ff16600581111561058357610583610d57565b14155b1561061257600180546002919060ff60a01b1916600160a01b835b0217905550600154600160a01b900460ff1660058111156105c4576105c4610d57565b6004546002546003546040519081526001600160a01b0392831692909116907fb04efa95c2e317d8afba4237350a971f1ce59ef6fbbf2eb3f1a7e3f3f106a8f49060200160405180910390a4565b6004546001600160a01b03163314801561066f575060018054600160a01b900460ff16600581111561064657610646610d57565b148061066f57506003600154600160a01b900460ff16600581111561066d5761066d610d57565b145b1561068e57600180546002919060ff60a01b1916600160a01b836105a1565b60405162461bcd60e51b815260206004820152603360248201527f7468652074726164652063616e6e6f742062652072656a656374656420696e2060448201527f746869732063757272656e74207374617475730000000000000000000000000060648201526084016102e3565b6000610706610cfe565b6002546001600160a01b031633146107865760405162461bcd60e51b815260206004820152603560248201527f4f6e6c79207468652073656c6c65722063616e20636f6e6669726d207468652060448201527f7061796d656e74206f6e2074686973207472616465000000000000000000000060648201526084016102e3565b6003600154600160a01b900460ff1660058111156107a6576107a6610d57565b146108195760405162461bcd60e51b815260206004820152602e60248201527f546865207472616465206d75737420626520616363657074656420627920746860448201527f65206275796572206265666f726500000000000000000000000000000000000060648201526084016102e3565b600180547404000000000000000000000000000000000000000060ff60a01b19821617909155600254600480546003546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03948516938101939093529083166024830152604482015260009291909116906323b872dd906064016020604051808303816000875af11580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190610e28565b9050806109315760405162461bcd60e51b815260206004820152601760248201527f746865207472616e7366657220686173206661696c656400000000000000000060448201526064016102e3565b600154600160a01b900460ff16600581111561094f5761094f610d57565b6004546002546003546040519081526001600160a01b0392831692909116907fb04efa95c2e317d8afba4237350a971f1ce59ef6fbbf2eb3f1a7e3f3f106a8f49060200160405180910390a460019150506109aa6001600055565b90565b6002546001600160a01b03163314610a2d5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652073656c6c65722063616e2075706461746520746869732060448201527f747261646500000000000000000000000000000000000000000000000000000060648201526084016102e3565b6000600154600160a01b900460ff166005811115610a4d57610a4d610d57565b14610ac05760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f74206368616e6765207468652074726164652064657461696c732060448201527f756e6c65737320696e206472616674207374617475730000000000000000000060648201526084016102e3565b60015460208201516040517fc41251a10000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063c41251a190602401602060405180830381865afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190610e28565b610bbd5760405162461bcd60e51b815260206004820152603760248201527f4275796572206d75737420626520612076616c696420696e766573746f72206560448201527f76656e206f6e206368616e67696e672064657461696c7300000000000000000060648201526084016102e3565b80516003556020810151600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790556040810151600590815560608201516006556080820151600755600154600160a01b900460ff1690811115610c3557610c35610d57565b60208281015160025484516040519081526001600160a01b039283169392909116917fb04efa95c2e317d8afba4237350a971f1ce59ef6fbbf2eb3f1a7e3f3f106a8f4910160405180910390a450565b610cc06040518060a001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b506040805160a08101825260035481526004546001600160a01b03166020820152600554918101919091526006546060820152600754608082015290565b600260005403610d505760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102e3565b6002600055565b634e487b7160e01b600052602160045260246000fd5b6020810160068310610d8f57634e487b7160e01b600052602160045260246000fd5b91905290565b600060a08284031215610da757600080fd5b60405160a0810181811067ffffffffffffffff82111715610dd857634e487b7160e01b600052604160045260246000fd5b6040528235815260208301356001600160a01b0381168114610df957600080fd5b806020830152506040830135604082015260608301356060820152608083013560808201528091505092915050565b600060208284031215610e3a57600080fd5b81518015158114610e4a57600080fd5b939250505056fea2646970667358221220a0e2db9f14e1c86d0c4904a7be51b5ac12d6895a2204c2a1ad82e2d851d3fcb964736f6c63430008110033";

type BilateralTradeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BilateralTradeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BilateralTrade__factory extends ContractFactory {
  constructor(...args: BilateralTradeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _register: AddressLike,
    _buyer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_register, _buyer, overrides || {});
  }
  override deploy(
    _register: AddressLike,
    _buyer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_register, _buyer, overrides || {}) as Promise<
      BilateralTrade & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BilateralTrade__factory {
    return super.connect(runner) as BilateralTrade__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BilateralTradeInterface {
    return new Interface(_abi) as BilateralTradeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BilateralTrade {
    return new Contract(address, _abi, runner) as unknown as BilateralTrade;
  }
}

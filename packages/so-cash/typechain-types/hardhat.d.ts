/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SoCashAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SoCashAccount__factory>;
    getContractFactory(
      name: "SoCashBank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SoCashBank__factory>;
    getContractFactory(
      name: "IHTLCPayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHTLCPayment__factory>;
    getContractFactory(
      name: "ISoCashAccountFull",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISoCashAccountFull__factory>;
    getContractFactory(
      name: "ISoCashOwnedAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISoCashOwnedAccount__factory>;
    getContractFactory(
      name: "IERC20Compatibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Compatibility__factory>;
    getContractFactory(
      name: "ISoCashBankBackOffice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISoCashBankBackOffice__factory>;
    getContractFactory(
      name: "ISoCashBankExternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISoCashBankExternal__factory>;
    getContractFactory(
      name: "ISoCashInterBank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISoCashInterBank__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IWhitelistedSenders",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWhitelistedSenders__factory>;
    getContractFactory(
      name: "HTLCPaymentCapacity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HTLCPaymentCapacity__factory>;
    getContractFactory(
      name: "IBANCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBANCalculator__factory>;
    getContractFactory(
      name: "WhitelistedSenders",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistedSenders__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SoCashAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SoCashAccount>;
    getContractAt(
      name: "SoCashBank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SoCashBank>;
    getContractAt(
      name: "IHTLCPayment",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHTLCPayment>;
    getContractAt(
      name: "ISoCashAccountFull",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISoCashAccountFull>;
    getContractAt(
      name: "ISoCashOwnedAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISoCashOwnedAccount>;
    getContractAt(
      name: "IERC20Compatibility",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Compatibility>;
    getContractAt(
      name: "ISoCashBankBackOffice",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISoCashBankBackOffice>;
    getContractAt(
      name: "ISoCashBankExternal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISoCashBankExternal>;
    getContractAt(
      name: "ISoCashInterBank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISoCashInterBank>;
    getContractAt(
      name: "IOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IWhitelistedSenders",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWhitelistedSenders>;
    getContractAt(
      name: "HTLCPaymentCapacity",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HTLCPaymentCapacity>;
    getContractAt(
      name: "IBANCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBANCalculator>;
    getContractAt(
      name: "WhitelistedSenders",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistedSenders>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SoCashAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SoCashAccount>;
    deployContract(
      name: "SoCashBank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SoCashBank>;
    deployContract(
      name: "IHTLCPayment",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHTLCPayment>;
    deployContract(
      name: "ISoCashAccountFull",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashAccountFull>;
    deployContract(
      name: "ISoCashOwnedAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashOwnedAccount>;
    deployContract(
      name: "IERC20Compatibility",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Compatibility>;
    deployContract(
      name: "ISoCashBankBackOffice",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashBankBackOffice>;
    deployContract(
      name: "ISoCashBankExternal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashBankExternal>;
    deployContract(
      name: "ISoCashInterBank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashInterBank>;
    deployContract(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "IWhitelistedSenders",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWhitelistedSenders>;
    deployContract(
      name: "HTLCPaymentCapacity",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HTLCPaymentCapacity>;
    deployContract(
      name: "IBANCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBANCalculator>;
    deployContract(
      name: "WhitelistedSenders",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WhitelistedSenders>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SoCashAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SoCashAccount>;
    deployContract(
      name: "SoCashBank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SoCashBank>;
    deployContract(
      name: "IHTLCPayment",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHTLCPayment>;
    deployContract(
      name: "ISoCashAccountFull",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashAccountFull>;
    deployContract(
      name: "ISoCashOwnedAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashOwnedAccount>;
    deployContract(
      name: "IERC20Compatibility",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Compatibility>;
    deployContract(
      name: "ISoCashBankBackOffice",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashBankBackOffice>;
    deployContract(
      name: "ISoCashBankExternal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashBankExternal>;
    deployContract(
      name: "ISoCashInterBank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISoCashInterBank>;
    deployContract(
      name: "IOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOwnable>;
    deployContract(
      name: "IWhitelistedSenders",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWhitelistedSenders>;
    deployContract(
      name: "HTLCPaymentCapacity",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HTLCPaymentCapacity>;
    deployContract(
      name: "IBANCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBANCalculator>;
    deployContract(
      name: "WhitelistedSenders",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WhitelistedSenders>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type RecipentInfoStruct = {
  account: AddressLike;
  bic: BytesLike;
  iban: BytesLike;
};

export type RecipentInfoStructOutput = [
  account: string,
  bic: string,
  iban: string
] & { account: string; bic: string; iban: string };

export declare namespace IHTLCPayment {
  export type HTLCStruct = {
    recipient: RecipentInfoStruct;
    amount: BigNumberish;
    deadline: BigNumberish;
    hashlockPaid: BytesLike;
    hashlockCancel: BytesLike;
    opaque: string;
    state: BigNumberish;
  };

  export type HTLCStructOutput = [
    recipient: RecipentInfoStructOutput,
    amount: bigint,
    deadline: bigint,
    hashlockPaid: string,
    hashlockCancel: string,
    opaque: string,
    state: bigint
  ] & {
    recipient: RecipentInfoStructOutput;
    amount: bigint;
    deadline: bigint;
    hashlockPaid: string;
    hashlockCancel: string;
    opaque: string;
    state: bigint;
  };
}

export interface IHTLCPaymentInterface extends Interface {
  getFunction(
    nameOrSignature: "getHTLCPayment" | "verifyHTLC" | "verifyHTLCCancel"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "HTLCPaymentCreated" | "HTLCPaymentRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getHTLCPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyHTLC",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyHTLCCancel",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getHTLCPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyHTLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyHTLCCancel",
    data: BytesLike
  ): Result;
}

export namespace HTLCPaymentCreatedEvent {
  export type InputTuple = [
    id: BytesLike,
    hashlockPaid: BytesLike,
    htlc: IHTLCPayment.HTLCStruct
  ];
  export type OutputTuple = [
    id: string,
    hashlockPaid: string,
    htlc: IHTLCPayment.HTLCStructOutput
  ];
  export interface OutputObject {
    id: string;
    hashlockPaid: string;
    htlc: IHTLCPayment.HTLCStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCPaymentRemovedEvent {
  export type InputTuple = [
    id: BytesLike,
    amount: BigNumberish,
    deadline: BigNumberish,
    usingSecret: string,
    opaque: string,
    cancelled: boolean
  ];
  export type OutputTuple = [
    id: string,
    amount: bigint,
    deadline: bigint,
    usingSecret: string,
    opaque: string,
    cancelled: boolean
  ];
  export interface OutputObject {
    id: string;
    amount: bigint;
    deadline: bigint;
    usingSecret: string;
    opaque: string;
    cancelled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IHTLCPayment extends BaseContract {
  connect(runner?: ContractRunner | null): IHTLCPayment;
  waitForDeployment(): Promise<this>;

  interface: IHTLCPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getHTLCPayment: TypedContractMethod<
    [id: BytesLike],
    [IHTLCPayment.HTLCStructOutput],
    "view"
  >;

  verifyHTLC: TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  verifyHTLCCancel: TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getHTLCPayment"
  ): TypedContractMethod<
    [id: BytesLike],
    [IHTLCPayment.HTLCStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyHTLC"
  ): TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyHTLCCancel"
  ): TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  getEvent(
    key: "HTLCPaymentCreated"
  ): TypedContractEvent<
    HTLCPaymentCreatedEvent.InputTuple,
    HTLCPaymentCreatedEvent.OutputTuple,
    HTLCPaymentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCPaymentRemoved"
  ): TypedContractEvent<
    HTLCPaymentRemovedEvent.InputTuple,
    HTLCPaymentRemovedEvent.OutputTuple,
    HTLCPaymentRemovedEvent.OutputObject
  >;

  filters: {
    "HTLCPaymentCreated(bytes32,bytes32,tuple)": TypedContractEvent<
      HTLCPaymentCreatedEvent.InputTuple,
      HTLCPaymentCreatedEvent.OutputTuple,
      HTLCPaymentCreatedEvent.OutputObject
    >;
    HTLCPaymentCreated: TypedContractEvent<
      HTLCPaymentCreatedEvent.InputTuple,
      HTLCPaymentCreatedEvent.OutputTuple,
      HTLCPaymentCreatedEvent.OutputObject
    >;

    "HTLCPaymentRemoved(bytes32,uint256,uint256,string,string,bool)": TypedContractEvent<
      HTLCPaymentRemovedEvent.InputTuple,
      HTLCPaymentRemovedEvent.OutputTuple,
      HTLCPaymentRemovedEvent.OutputObject
    >;
    HTLCPaymentRemoved: TypedContractEvent<
      HTLCPaymentRemovedEvent.InputTuple,
      HTLCPaymentRemovedEvent.OutputTuple,
      HTLCPaymentRemovedEvent.OutputObject
    >;
  };
}

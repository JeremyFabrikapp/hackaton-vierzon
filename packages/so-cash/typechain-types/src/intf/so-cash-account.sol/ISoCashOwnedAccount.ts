/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type RecipentInfoStruct = {
  account: AddressLike;
  bic: BytesLike;
  iban: BytesLike;
};

export type RecipentInfoStructOutput = [
  account: string,
  bic: string,
  iban: string
] & { account: string; bic: string; iban: string };

export interface ISoCashOwnedAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountNumber"
      | "allowance"
      | "approve"
      | "balance"
      | "balanceOf"
      | "bank"
      | "decimals"
      | "fullBalance"
      | "getAttributeNum"
      | "getAttributeStr"
      | "iban"
      | "lockFunds"
      | "lockedBalance"
      | "name"
      | "setAttributeNum"
      | "setAttributeStr"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferEx"
      | "transferFrom"
      | "transferLockedFunds"
      | "unlockFunds"
      | "unlockedBalance"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;

  encodeFunctionData(
    functionFragment: "accountNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fullBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeNum",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeStr",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "iban", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [
      RecipentInfoStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAttributeNum",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeStr",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEx",
    values: [RecipentInfoStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLockedFunds",
    values: [BytesLike, RecipentInfoStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockedBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeStr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "iban", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeStr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferEx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLockedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockedBalance",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISoCashOwnedAccount extends BaseContract {
  connect(runner?: ContractRunner | null): ISoCashOwnedAccount;
  waitForDeployment(): Promise<this>;

  interface: ISoCashOwnedAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountNumber: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balance: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bank: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  fullBalance: TypedContractMethod<[], [bigint], "view">;

  getAttributeNum: TypedContractMethod<[name: BytesLike], [bigint], "view">;

  getAttributeStr: TypedContractMethod<[name: BytesLike], [string], "view">;

  iban: TypedContractMethod<[], [string], "view">;

  lockFunds: TypedContractMethod<
    [
      recipient: RecipentInfoStruct,
      amount: BigNumberish,
      deadline: BigNumberish,
      hashlockPaid: BytesLike,
      hashlockCancel: BytesLike,
      opaque: string
    ],
    [string],
    "nonpayable"
  >;

  lockedBalance: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  setAttributeNum: TypedContractMethod<
    [name: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAttributeStr: TypedContractMethod<
    [name: BytesLike, value: string],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferEx: TypedContractMethod<
    [recipient: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferLockedFunds: TypedContractMethod<
    [
      key: BytesLike,
      recipient: RecipentInfoStruct,
      secret: string,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;

  unlockFunds: TypedContractMethod<
    [key: BytesLike, secret: string],
    [boolean],
    "nonpayable"
  >;

  unlockedBalance: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bank"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fullBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttributeNum"
  ): TypedContractMethod<[name: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttributeStr"
  ): TypedContractMethod<[name: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "iban"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lockFunds"
  ): TypedContractMethod<
    [
      recipient: RecipentInfoStruct,
      amount: BigNumberish,
      deadline: BigNumberish,
      hashlockPaid: BytesLike,
      hashlockCancel: BytesLike,
      opaque: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockedBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAttributeNum"
  ): TypedContractMethod<
    [name: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAttributeStr"
  ): TypedContractMethod<
    [name: BytesLike, value: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferEx"
  ): TypedContractMethod<
    [recipient: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLockedFunds"
  ): TypedContractMethod<
    [
      key: BytesLike,
      recipient: RecipentInfoStruct,
      secret: string,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockFunds"
  ): TypedContractMethod<
    [key: BytesLike, secret: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockedBalance"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}

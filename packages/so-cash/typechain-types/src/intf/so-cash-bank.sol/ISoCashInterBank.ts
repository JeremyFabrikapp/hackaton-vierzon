/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type RecipentInfoStruct = {
  account: AddressLike;
  bic: BytesLike;
  iban: BytesLike;
};

export type RecipentInfoStructOutput = [
  account: string,
  bic: string,
  iban: string
] & { account: string; bic: string; iban: string };

export interface ISoCashInterBankInterface extends Interface {
  getFunction(
    nameOrSignature: "advice" | "interbankNetting" | "interbankTransfer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Adviced"): EventFragment;

  encodeFunctionData(
    functionFragment: "advice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interbankNetting",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interbankTransfer",
    values: [RecipentInfoStruct, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "advice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interbankNetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interbankTransfer",
    data: BytesLike
  ): Result;
}

export namespace AdvicedEvent {
  export type InputTuple = [
    target: AddressLike,
    account: AddressLike,
    amount: BigNumberish,
    direction: BigNumberish,
    id: BigNumberish
  ];
  export type OutputTuple = [
    target: string,
    account: string,
    amount: bigint,
    direction: bigint,
    id: bigint
  ];
  export interface OutputObject {
    target: string;
    account: string;
    amount: bigint;
    direction: bigint;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISoCashInterBank extends BaseContract {
  connect(runner?: ContractRunner | null): ISoCashInterBank;
  waitForDeployment(): Promise<this>;

  interface: ISoCashInterBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  advice: TypedContractMethod<
    [amount: BigNumberish, direction: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  interbankNetting: TypedContractMethod<
    [amount: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  interbankTransfer: TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "advice"
  ): TypedContractMethod<
    [amount: BigNumberish, direction: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interbankNetting"
  ): TypedContractMethod<
    [amount: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interbankTransfer"
  ): TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Adviced"
  ): TypedContractEvent<
    AdvicedEvent.InputTuple,
    AdvicedEvent.OutputTuple,
    AdvicedEvent.OutputObject
  >;

  filters: {
    "Adviced(address,address,uint256,uint8,uint256)": TypedContractEvent<
      AdvicedEvent.InputTuple,
      AdvicedEvent.OutputTuple,
      AdvicedEvent.OutputObject
    >;
    Adviced: TypedContractEvent<
      AdvicedEvent.InputTuple,
      AdvicedEvent.OutputTuple,
      AdvicedEvent.OutputObject
    >;
  };
}

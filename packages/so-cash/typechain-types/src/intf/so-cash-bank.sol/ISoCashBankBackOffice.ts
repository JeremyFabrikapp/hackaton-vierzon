/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type CorrespondentBankStruct = {
  registered: boolean;
  loro: AddressLike;
  nostro: AddressLike;
  lastNostroBalance: BigNumberish;
};

export type CorrespondentBankStructOutput = [
  registered: boolean,
  loro: string,
  nostro: string,
  lastNostroBalance: bigint
] & {
  registered: boolean;
  loro: string;
  nostro: string;
  lastNostroBalance: bigint;
};

export type RecipentInfoStruct = {
  account: AddressLike;
  bic: BytesLike;
  iban: BytesLike;
};

export type RecipentInfoStructOutput = [
  account: string,
  bic: string,
  iban: string
] & { account: string; bic: string; iban: string };

export interface ISoCashBankBackOfficeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "correspondent"
      | "credit"
      | "creditNostro"
      | "debit"
      | "decidePendingTransfer"
      | "isAccountActive"
      | "isAccountRegistered"
      | "isCorrespondentRegistered"
      | "lockFunds"
      | "registerAccount"
      | "registerCorrespondent"
      | "requestNetting"
      | "synchroNostro"
      | "toggleAccountActive"
      | "transferFrom"
      | "unlockFunds"
      | "unregisterAccount"
      | "unregisterCorrespondent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountActivation"
      | "AccountRegistration"
      | "BankCreation"
      | "BankRegistration"
      | "TransfertStateChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "correspondent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditNostro",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debit",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decidePendingTransfer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCorrespondentRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCorrespondent",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNetting",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "synchroNostro",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAccountActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, RecipentInfoStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterCorrespondent",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "correspondent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditNostro",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decidePendingTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCorrespondentRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCorrespondent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "synchroNostro",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleAccountActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterCorrespondent",
    data: BytesLike
  ): Result;
}

export namespace AccountActivationEvent {
  export type InputTuple = [account: AddressLike, active: boolean];
  export type OutputTuple = [account: string, active: boolean];
  export interface OutputObject {
    account: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountRegistrationEvent {
  export type InputTuple = [account: AddressLike, registered: boolean];
  export type OutputTuple = [account: string, registered: boolean];
  export interface OutputObject {
    account: string;
    registered: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BankCreationEvent {
  export type InputTuple = [bank: AddressLike, bic: string, currency: string];
  export type OutputTuple = [bank: string, bic: string, currency: string];
  export interface OutputObject {
    bank: string;
    bic: string;
    currency: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BankRegistrationEvent {
  export type InputTuple = [bank: AddressLike, registered: boolean];
  export type OutputTuple = [bank: string, registered: boolean];
  export interface OutputObject {
    bank: string;
    registered: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransfertStateChangedEvent {
  export type InputTuple = [id: BigNumberish, status: BigNumberish];
  export type OutputTuple = [id: bigint, status: bigint];
  export interface OutputObject {
    id: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISoCashBankBackOffice extends BaseContract {
  connect(runner?: ContractRunner | null): ISoCashBankBackOffice;
  waitForDeployment(): Promise<this>;

  interface: ISoCashBankBackOfficeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  correspondent: TypedContractMethod<
    [correspondent: AddressLike],
    [CorrespondentBankStructOutput],
    "view"
  >;

  credit: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  creditNostro: TypedContractMethod<
    [nostro: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  debit: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  decidePendingTransfer: TypedContractMethod<
    [id: BigNumberish, status: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;

  isAccountActive: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isAccountRegistered: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isCorrespondentRegistered: TypedContractMethod<
    [correspondent: AddressLike],
    [boolean],
    "view"
  >;

  lockFunds: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  registerAccount: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  registerCorrespondent: TypedContractMethod<
    [correspondent: AddressLike, loro: AddressLike, nostro: AddressLike],
    [boolean],
    "nonpayable"
  >;

  requestNetting: TypedContractMethod<
    [correspondent: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  synchroNostro: TypedContractMethod<
    [nostro: AddressLike],
    [boolean],
    "nonpayable"
  >;

  toggleAccountActive: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: RecipentInfoStruct,
      amount: BigNumberish,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;

  unlockFunds: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unregisterAccount: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  unregisterCorrespondent: TypedContractMethod<
    [correspondent: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "correspondent"
  ): TypedContractMethod<
    [correspondent: AddressLike],
    [CorrespondentBankStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "credit"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditNostro"
  ): TypedContractMethod<
    [nostro: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debit"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decidePendingTransfer"
  ): TypedContractMethod<
    [id: BigNumberish, status: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAccountActive"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAccountRegistered"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCorrespondentRegistered"
  ): TypedContractMethod<[correspondent: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockFunds"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAccount"
  ): TypedContractMethod<[account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "registerCorrespondent"
  ): TypedContractMethod<
    [correspondent: AddressLike, loro: AddressLike, nostro: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestNetting"
  ): TypedContractMethod<
    [correspondent: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "synchroNostro"
  ): TypedContractMethod<[nostro: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleAccountActive"
  ): TypedContractMethod<[account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: RecipentInfoStruct,
      amount: BigNumberish,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockFunds"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unregisterAccount"
  ): TypedContractMethod<[account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterCorrespondent"
  ): TypedContractMethod<[correspondent: AddressLike], [boolean], "nonpayable">;

  getEvent(
    key: "AccountActivation"
  ): TypedContractEvent<
    AccountActivationEvent.InputTuple,
    AccountActivationEvent.OutputTuple,
    AccountActivationEvent.OutputObject
  >;
  getEvent(
    key: "AccountRegistration"
  ): TypedContractEvent<
    AccountRegistrationEvent.InputTuple,
    AccountRegistrationEvent.OutputTuple,
    AccountRegistrationEvent.OutputObject
  >;
  getEvent(
    key: "BankCreation"
  ): TypedContractEvent<
    BankCreationEvent.InputTuple,
    BankCreationEvent.OutputTuple,
    BankCreationEvent.OutputObject
  >;
  getEvent(
    key: "BankRegistration"
  ): TypedContractEvent<
    BankRegistrationEvent.InputTuple,
    BankRegistrationEvent.OutputTuple,
    BankRegistrationEvent.OutputObject
  >;
  getEvent(
    key: "TransfertStateChanged"
  ): TypedContractEvent<
    TransfertStateChangedEvent.InputTuple,
    TransfertStateChangedEvent.OutputTuple,
    TransfertStateChangedEvent.OutputObject
  >;

  filters: {
    "AccountActivation(address,bool)": TypedContractEvent<
      AccountActivationEvent.InputTuple,
      AccountActivationEvent.OutputTuple,
      AccountActivationEvent.OutputObject
    >;
    AccountActivation: TypedContractEvent<
      AccountActivationEvent.InputTuple,
      AccountActivationEvent.OutputTuple,
      AccountActivationEvent.OutputObject
    >;

    "AccountRegistration(address,bool)": TypedContractEvent<
      AccountRegistrationEvent.InputTuple,
      AccountRegistrationEvent.OutputTuple,
      AccountRegistrationEvent.OutputObject
    >;
    AccountRegistration: TypedContractEvent<
      AccountRegistrationEvent.InputTuple,
      AccountRegistrationEvent.OutputTuple,
      AccountRegistrationEvent.OutputObject
    >;

    "BankCreation(address,string,string)": TypedContractEvent<
      BankCreationEvent.InputTuple,
      BankCreationEvent.OutputTuple,
      BankCreationEvent.OutputObject
    >;
    BankCreation: TypedContractEvent<
      BankCreationEvent.InputTuple,
      BankCreationEvent.OutputTuple,
      BankCreationEvent.OutputObject
    >;

    "BankRegistration(address,bool)": TypedContractEvent<
      BankRegistrationEvent.InputTuple,
      BankRegistrationEvent.OutputTuple,
      BankRegistrationEvent.OutputObject
    >;
    BankRegistration: TypedContractEvent<
      BankRegistrationEvent.InputTuple,
      BankRegistrationEvent.OutputTuple,
      BankRegistrationEvent.OutputObject
    >;

    "TransfertStateChanged(uint256,uint8)": TypedContractEvent<
      TransfertStateChangedEvent.InputTuple,
      TransfertStateChangedEvent.OutputTuple,
      TransfertStateChangedEvent.OutputObject
    >;
    TransfertStateChanged: TypedContractEvent<
      TransfertStateChangedEvent.InputTuple,
      TransfertStateChangedEvent.OutputTuple,
      TransfertStateChangedEvent.OutputObject
    >;
  };
}

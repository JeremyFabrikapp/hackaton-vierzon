/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type RecipentInfoStruct = {
  account: AddressLike;
  bic: BytesLike;
  iban: BytesLike;
};

export type RecipentInfoStructOutput = [
  account: string,
  bic: string,
  iban: string
] & { account: string; bic: string; iban: string };

export type TransferInfoStruct = {
  sender: AddressLike;
  recipient: RecipentInfoStruct;
  amount: BigNumberish;
  status: BigNumberish;
  details: string;
  reason: string;
};

export type TransferInfoStructOutput = [
  sender: string,
  recipient: RecipentInfoStructOutput,
  amount: bigint,
  status: bigint,
  details: string,
  reason: string
] & {
  sender: string;
  recipient: RecipentInfoStructOutput;
  amount: bigint;
  status: bigint;
  details: string;
  reason: string;
};

export interface ISoCashBankExternalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountNumberOf"
      | "addressOf"
      | "balanceOf"
      | "bic"
      | "codes"
      | "decimals"
      | "decodeIBAN"
      | "fullBalanceOf"
      | "ibanOf"
      | "lockFunds"
      | "lockedBalanceOf"
      | "name"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferInfo"
      | "unlockFunds"
      | "unlockedBalanceOf"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Transfer" | "TransferEx"): EventFragment;

  encodeFunctionData(
    functionFragment: "accountNumberOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bic", values?: undefined): string;
  encodeFunctionData(functionFragment: "codes", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "decodeIBAN", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fullBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ibanOf", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [RecipentInfoStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockedBalanceOf",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountNumberOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "codes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decodeIBAN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ibanOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockedBalanceOf",
    data: BytesLike
  ): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferExEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    id: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    id: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISoCashBankExternal extends BaseContract {
  connect(runner?: ContractRunner | null): ISoCashBankExternal;
  waitForDeployment(): Promise<this>;

  interface: ISoCashBankExternalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountNumberOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  addressOf: TypedContractMethod<
    [accountNumber: BigNumberish],
    [string],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bic: TypedContractMethod<[], [string], "view">;

  codes: TypedContractMethod<
    [],
    [[string, string] & { bankCode: string; branchCode: string }],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decodeIBAN: TypedContractMethod<
    [iban: string],
    [[string, string] & { bank: string; account: string }],
    "view"
  >;

  fullBalanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  ibanOf: TypedContractMethod<[account: AddressLike], [string], "view">;

  lockFunds: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  lockedBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  transferInfo: TypedContractMethod<
    [id: BigNumberish],
    [TransferInfoStructOutput],
    "view"
  >;

  unlockFunds: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unlockedBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountNumberOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressOf"
  ): TypedContractMethod<[accountNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bic"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "codes"
  ): TypedContractMethod<
    [],
    [[string, string] & { bankCode: string; branchCode: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decodeIBAN"
  ): TypedContractMethod<
    [iban: string],
    [[string, string] & { bank: string; account: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "fullBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ibanOf"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "lockFunds"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "lockedBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferInfo"
  ): TypedContractMethod<
    [id: BigNumberish],
    [TransferInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "unlockFunds"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockedBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferEx"
  ): TypedContractEvent<
    TransferExEvent.InputTuple,
    TransferExEvent.OutputTuple,
    TransferExEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferEx(address,address,uint256,uint256)": TypedContractEvent<
      TransferExEvent.InputTuple,
      TransferExEvent.OutputTuple,
      TransferExEvent.OutputObject
    >;
    TransferEx: TypedContractEvent<
      TransferExEvent.InputTuple,
      TransferExEvent.OutputTuple,
      TransferExEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IBANCalculatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateFrenchIBAN"
      | "calculateIBAN"
      | "extractFrenchIBAN"
      | "frenchBBAN"
      | "frenchRIBKey"
      | "frenchStringToNumber"
      | "ibanKey"
      | "ibanStringToNumber"
      | "padWithZeros"
      | "uintToString"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateFrenchIBAN",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateIBAN",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "extractFrenchIBAN",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "frenchBBAN",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "frenchRIBKey",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frenchStringToNumber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ibanKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ibanStringToNumber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "padWithZeros",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uintToString",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFrenchIBAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateIBAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractFrenchIBAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frenchBBAN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "frenchRIBKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frenchStringToNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ibanKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ibanStringToNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "padWithZeros",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uintToString",
    data: BytesLike
  ): Result;
}

export interface IBANCalculator extends BaseContract {
  connect(runner?: ContractRunner | null): IBANCalculator;
  waitForDeployment(): Promise<this>;

  interface: IBANCalculatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateFrenchIBAN: TypedContractMethod<
    [bankCode5: string, branchCode5: string, accountNumber11: string],
    [string],
    "view"
  >;

  calculateIBAN: TypedContractMethod<
    [countryCode: string, bban: string],
    [string],
    "view"
  >;

  extractFrenchIBAN: TypedContractMethod<
    [iban: string],
    [
      [boolean, string, string, string, bigint] & {
        valid: boolean;
        bankCode5: string;
        branchCode5: string;
        accountNumber11: string;
        ribKey: bigint;
      }
    ],
    "view"
  >;

  frenchBBAN: TypedContractMethod<
    [bankCode5: string, branchCode5: string, accountNumber11: string],
    [string],
    "view"
  >;

  frenchRIBKey: TypedContractMethod<
    [
      bankCode: BigNumberish,
      branchCode: BigNumberish,
      accountNumber: BigNumberish
    ],
    [bigint],
    "view"
  >;

  frenchStringToNumber: TypedContractMethod<[s: string], [bigint], "view">;

  ibanKey: TypedContractMethod<[fakeIbanValue: BigNumberish], [bigint], "view">;

  ibanStringToNumber: TypedContractMethod<[s: string], [bigint], "view">;

  padWithZeros: TypedContractMethod<
    [s: string, length: BigNumberish],
    [string],
    "view"
  >;

  uintToString: TypedContractMethod<[v: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateFrenchIBAN"
  ): TypedContractMethod<
    [bankCode5: string, branchCode5: string, accountNumber11: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateIBAN"
  ): TypedContractMethod<[countryCode: string, bban: string], [string], "view">;
  getFunction(
    nameOrSignature: "extractFrenchIBAN"
  ): TypedContractMethod<
    [iban: string],
    [
      [boolean, string, string, string, bigint] & {
        valid: boolean;
        bankCode5: string;
        branchCode5: string;
        accountNumber11: string;
        ribKey: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "frenchBBAN"
  ): TypedContractMethod<
    [bankCode5: string, branchCode5: string, accountNumber11: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "frenchRIBKey"
  ): TypedContractMethod<
    [
      bankCode: BigNumberish,
      branchCode: BigNumberish,
      accountNumber: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "frenchStringToNumber"
  ): TypedContractMethod<[s: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "ibanKey"
  ): TypedContractMethod<[fakeIbanValue: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ibanStringToNumber"
  ): TypedContractMethod<[s: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "padWithZeros"
  ): TypedContractMethod<[s: string, length: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "uintToString"
  ): TypedContractMethod<[v: BigNumberish], [string], "view">;

  filters: {};
}

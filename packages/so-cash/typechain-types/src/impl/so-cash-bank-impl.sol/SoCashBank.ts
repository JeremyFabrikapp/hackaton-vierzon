/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type CorrespondentBankStruct = {
  registered: boolean;
  loro: AddressLike;
  nostro: AddressLike;
  lastNostroBalance: BigNumberish;
};

export type CorrespondentBankStructOutput = [
  registered: boolean,
  loro: string,
  nostro: string,
  lastNostroBalance: bigint
] & {
  registered: boolean;
  loro: string;
  nostro: string;
  lastNostroBalance: bigint;
};

export type RecipentInfoStruct = {
  account: AddressLike;
  bic: BytesLike;
  iban: BytesLike;
};

export type RecipentInfoStructOutput = [
  account: string,
  bic: string,
  iban: string
] & { account: string; bic: string; iban: string };

export type TransferInfoStruct = {
  sender: AddressLike;
  recipient: RecipentInfoStruct;
  amount: BigNumberish;
  status: BigNumberish;
  details: string;
  reason: string;
};

export type TransferInfoStructOutput = [
  sender: string,
  recipient: RecipentInfoStructOutput,
  amount: bigint,
  status: bigint,
  details: string,
  reason: string
] & {
  sender: string;
  recipient: RecipentInfoStructOutput;
  amount: bigint;
  status: bigint;
  details: string;
  reason: string;
};

export interface SoCashBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountNumberOf"
      | "addressOf"
      | "advice"
      | "balanceOf"
      | "bic"
      | "blacklist"
      | "codes"
      | "correspondent"
      | "credit"
      | "creditNostro"
      | "debit"
      | "decidePendingTransfer"
      | "decimals"
      | "decodeIBAN"
      | "fullBalanceOf"
      | "ibanOf"
      | "interbankNetting"
      | "interbankTransfer"
      | "isAccountActive"
      | "isAccountRegistered"
      | "isCorrespondentRegistered"
      | "isWhitelisted"
      | "lockFunds(address,uint256)"
      | "lockFunds(uint256)"
      | "lockedBalanceOf"
      | "name"
      | "owner"
      | "registerAccount"
      | "registerCorrespondent"
      | "renounceOwnership"
      | "requestNetting"
      | "setIBANCalculator"
      | "symbol"
      | "synchroNostro"
      | "toggleAccountActive"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferInfo"
      | "transferOwnership"
      | "unlockFunds(uint256)"
      | "unlockFunds(address,uint256)"
      | "unlockedBalanceOf"
      | "unregisterAccount"
      | "unregisterCorrespondent"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountActivation"
      | "AccountRegistration"
      | "Adviced"
      | "BankCreation"
      | "BankRegistration"
      | "OwnershipTransferred"
      | "Transfer"
      | "TransferEx"
      | "TransfertStateChanged"
      | "Whitelisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountNumberOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "advice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bic", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "codes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "correspondent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditNostro",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debit",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decidePendingTransfer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "decodeIBAN", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fullBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ibanOf", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "interbankNetting",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interbankTransfer",
    values: [RecipentInfoStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCorrespondentRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFunds(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFunds(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCorrespondent",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestNetting",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIBANCalculator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "synchroNostro",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAccountActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [RecipentInfoStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, RecipentInfoStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockedBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterCorrespondent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountNumberOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "advice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "codes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correspondent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditNostro",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decidePendingTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decodeIBAN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ibanOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interbankNetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interbankTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCorrespondentRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockFunds(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockFunds(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCorrespondent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNetting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIBANCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "synchroNostro",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleAccountActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterCorrespondent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace AccountActivationEvent {
  export type InputTuple = [account: AddressLike, active: boolean];
  export type OutputTuple = [account: string, active: boolean];
  export interface OutputObject {
    account: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountRegistrationEvent {
  export type InputTuple = [account: AddressLike, registered: boolean];
  export type OutputTuple = [account: string, registered: boolean];
  export interface OutputObject {
    account: string;
    registered: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdvicedEvent {
  export type InputTuple = [
    target: AddressLike,
    account: AddressLike,
    amount: BigNumberish,
    direction: BigNumberish,
    id: BigNumberish
  ];
  export type OutputTuple = [
    target: string,
    account: string,
    amount: bigint,
    direction: bigint,
    id: bigint
  ];
  export interface OutputObject {
    target: string;
    account: string;
    amount: bigint;
    direction: bigint;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BankCreationEvent {
  export type InputTuple = [bank: AddressLike, bic: string, currency: string];
  export type OutputTuple = [bank: string, bic: string, currency: string];
  export interface OutputObject {
    bank: string;
    bic: string;
    currency: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BankRegistrationEvent {
  export type InputTuple = [bank: AddressLike, registered: boolean];
  export type OutputTuple = [bank: string, registered: boolean];
  export interface OutputObject {
    bank: string;
    registered: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferExEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    id: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    id: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransfertStateChangedEvent {
  export type InputTuple = [id: BigNumberish, status: BigNumberish];
  export type OutputTuple = [id: bigint, status: bigint];
  export interface OutputObject {
    id: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SoCashBank extends BaseContract {
  connect(runner?: ContractRunner | null): SoCashBank;
  waitForDeployment(): Promise<this>;

  interface: SoCashBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountNumberOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  addressOf: TypedContractMethod<
    [accountNumber: BigNumberish],
    [string],
    "view"
  >;

  advice: TypedContractMethod<
    [amount: BigNumberish, direction: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  bic: TypedContractMethod<[], [string], "view">;

  blacklist: TypedContractMethod<
    [oldSender: AddressLike],
    [void],
    "nonpayable"
  >;

  codes: TypedContractMethod<[], [[string, string]], "view">;

  correspondent: TypedContractMethod<
    [bank: AddressLike],
    [CorrespondentBankStructOutput],
    "view"
  >;

  credit: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  creditNostro: TypedContractMethod<
    [nostro: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  debit: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  decidePendingTransfer: TypedContractMethod<
    [id: BigNumberish, status: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decodeIBAN: TypedContractMethod<
    [iban: string],
    [[string, string] & { bank: string; account: string }],
    "view"
  >;

  fullBalanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  ibanOf: TypedContractMethod<[account: AddressLike], [string], "view">;

  interbankNetting: TypedContractMethod<
    [amount: BigNumberish, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  interbankTransfer: TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isAccountActive: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isAccountRegistered: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isCorrespondentRegistered: TypedContractMethod<
    [bank: AddressLike],
    [boolean],
    "view"
  >;

  isWhitelisted: TypedContractMethod<[a: AddressLike], [boolean], "view">;

  "lockFunds(address,uint256)": TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "lockFunds(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  lockedBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerAccount: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  registerCorrespondent: TypedContractMethod<
    [bank: AddressLike, loro: AddressLike, nostro: AddressLike],
    [boolean],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestNetting: TypedContractMethod<
    [cBank: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setIBANCalculator: TypedContractMethod<
    [calc: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  synchroNostro: TypedContractMethod<
    [nostro: AddressLike],
    [boolean],
    "nonpayable"
  >;

  toggleAccountActive: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: RecipentInfoStruct,
      amount: BigNumberish,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;

  transferInfo: TypedContractMethod<
    [id: BigNumberish],
    [TransferInfoStructOutput],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "unlockFunds(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "unlockFunds(address,uint256)": TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unlockedBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  unregisterAccount: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  unregisterCorrespondent: TypedContractMethod<
    [bank: AddressLike],
    [boolean],
    "nonpayable"
  >;

  whitelist: TypedContractMethod<
    [newSender: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountNumberOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressOf"
  ): TypedContractMethod<[accountNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "advice"
  ): TypedContractMethod<
    [amount: BigNumberish, direction: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bic"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blacklist"
  ): TypedContractMethod<[oldSender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "codes"
  ): TypedContractMethod<[], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "correspondent"
  ): TypedContractMethod<
    [bank: AddressLike],
    [CorrespondentBankStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "credit"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditNostro"
  ): TypedContractMethod<
    [nostro: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "debit"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decidePendingTransfer"
  ): TypedContractMethod<
    [id: BigNumberish, status: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decodeIBAN"
  ): TypedContractMethod<
    [iban: string],
    [[string, string] & { bank: string; account: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "fullBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ibanOf"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "interbankNetting"
  ): TypedContractMethod<
    [amount: BigNumberish, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interbankTransfer"
  ): TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, id: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAccountActive"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAccountRegistered"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCorrespondentRegistered"
  ): TypedContractMethod<[bank: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[a: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockFunds(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockFunds(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "lockedBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerAccount"
  ): TypedContractMethod<[account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "registerCorrespondent"
  ): TypedContractMethod<
    [bank: AddressLike, loro: AddressLike, nostro: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestNetting"
  ): TypedContractMethod<
    [cBank: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIBANCalculator"
  ): TypedContractMethod<[calc: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "synchroNostro"
  ): TypedContractMethod<[nostro: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleAccountActive"
  ): TypedContractMethod<[account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: RecipentInfoStruct,
      amount: BigNumberish,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferInfo"
  ): TypedContractMethod<
    [id: BigNumberish],
    [TransferInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockFunds(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockFunds(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockedBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unregisterAccount"
  ): TypedContractMethod<[account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterCorrespondent"
  ): TypedContractMethod<[bank: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[newSender: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AccountActivation"
  ): TypedContractEvent<
    AccountActivationEvent.InputTuple,
    AccountActivationEvent.OutputTuple,
    AccountActivationEvent.OutputObject
  >;
  getEvent(
    key: "AccountRegistration"
  ): TypedContractEvent<
    AccountRegistrationEvent.InputTuple,
    AccountRegistrationEvent.OutputTuple,
    AccountRegistrationEvent.OutputObject
  >;
  getEvent(
    key: "Adviced"
  ): TypedContractEvent<
    AdvicedEvent.InputTuple,
    AdvicedEvent.OutputTuple,
    AdvicedEvent.OutputObject
  >;
  getEvent(
    key: "BankCreation"
  ): TypedContractEvent<
    BankCreationEvent.InputTuple,
    BankCreationEvent.OutputTuple,
    BankCreationEvent.OutputObject
  >;
  getEvent(
    key: "BankRegistration"
  ): TypedContractEvent<
    BankRegistrationEvent.InputTuple,
    BankRegistrationEvent.OutputTuple,
    BankRegistrationEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferEx"
  ): TypedContractEvent<
    TransferExEvent.InputTuple,
    TransferExEvent.OutputTuple,
    TransferExEvent.OutputObject
  >;
  getEvent(
    key: "TransfertStateChanged"
  ): TypedContractEvent<
    TransfertStateChangedEvent.InputTuple,
    TransfertStateChangedEvent.OutputTuple,
    TransfertStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "Whitelisted"
  ): TypedContractEvent<
    WhitelistedEvent.InputTuple,
    WhitelistedEvent.OutputTuple,
    WhitelistedEvent.OutputObject
  >;

  filters: {
    "AccountActivation(address,bool)": TypedContractEvent<
      AccountActivationEvent.InputTuple,
      AccountActivationEvent.OutputTuple,
      AccountActivationEvent.OutputObject
    >;
    AccountActivation: TypedContractEvent<
      AccountActivationEvent.InputTuple,
      AccountActivationEvent.OutputTuple,
      AccountActivationEvent.OutputObject
    >;

    "AccountRegistration(address,bool)": TypedContractEvent<
      AccountRegistrationEvent.InputTuple,
      AccountRegistrationEvent.OutputTuple,
      AccountRegistrationEvent.OutputObject
    >;
    AccountRegistration: TypedContractEvent<
      AccountRegistrationEvent.InputTuple,
      AccountRegistrationEvent.OutputTuple,
      AccountRegistrationEvent.OutputObject
    >;

    "Adviced(address,address,uint256,uint8,uint256)": TypedContractEvent<
      AdvicedEvent.InputTuple,
      AdvicedEvent.OutputTuple,
      AdvicedEvent.OutputObject
    >;
    Adviced: TypedContractEvent<
      AdvicedEvent.InputTuple,
      AdvicedEvent.OutputTuple,
      AdvicedEvent.OutputObject
    >;

    "BankCreation(address,string,string)": TypedContractEvent<
      BankCreationEvent.InputTuple,
      BankCreationEvent.OutputTuple,
      BankCreationEvent.OutputObject
    >;
    BankCreation: TypedContractEvent<
      BankCreationEvent.InputTuple,
      BankCreationEvent.OutputTuple,
      BankCreationEvent.OutputObject
    >;

    "BankRegistration(address,bool)": TypedContractEvent<
      BankRegistrationEvent.InputTuple,
      BankRegistrationEvent.OutputTuple,
      BankRegistrationEvent.OutputObject
    >;
    BankRegistration: TypedContractEvent<
      BankRegistrationEvent.InputTuple,
      BankRegistrationEvent.OutputTuple,
      BankRegistrationEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferEx(address,address,uint256,uint256)": TypedContractEvent<
      TransferExEvent.InputTuple,
      TransferExEvent.OutputTuple,
      TransferExEvent.OutputObject
    >;
    TransferEx: TypedContractEvent<
      TransferExEvent.InputTuple,
      TransferExEvent.OutputTuple,
      TransferExEvent.OutputObject
    >;

    "TransfertStateChanged(uint256,uint8)": TypedContractEvent<
      TransfertStateChangedEvent.InputTuple,
      TransfertStateChangedEvent.OutputTuple,
      TransfertStateChangedEvent.OutputObject
    >;
    TransfertStateChanged: TypedContractEvent<
      TransfertStateChangedEvent.InputTuple,
      TransfertStateChangedEvent.OutputTuple,
      TransfertStateChangedEvent.OutputObject
    >;

    "Whitelisted(address,bool)": TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
    Whitelisted: TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
  };
}

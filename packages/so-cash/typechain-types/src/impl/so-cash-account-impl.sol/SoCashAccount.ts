/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type RecipentInfoStruct = {
  account: AddressLike;
  bic: BytesLike;
  iban: BytesLike;
};

export type RecipentInfoStructOutput = [
  account: string,
  bic: string,
  iban: string
] & { account: string; bic: string; iban: string };

export declare namespace IHTLCPayment {
  export type HTLCStruct = {
    recipient: RecipentInfoStruct;
    amount: BigNumberish;
    deadline: BigNumberish;
    hashlockPaid: BytesLike;
    hashlockCancel: BytesLike;
    opaque: string;
    state: BigNumberish;
  };

  export type HTLCStructOutput = [
    recipient: RecipentInfoStructOutput,
    amount: bigint,
    deadline: bigint,
    hashlockPaid: string,
    hashlockCancel: string,
    opaque: string,
    state: bigint
  ] & {
    recipient: RecipentInfoStructOutput;
    amount: bigint;
    deadline: bigint;
    hashlockPaid: string;
    hashlockCancel: string;
    opaque: string;
    state: bigint;
  };
}

export interface SoCashAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountNumber"
      | "allowance"
      | "approve"
      | "balance"
      | "balanceOf"
      | "bank"
      | "blacklist"
      | "decimals"
      | "fullBalance"
      | "getAttributeNum"
      | "getAttributeStr"
      | "getHTLCPayment"
      | "iban"
      | "isWhitelisted"
      | "lockFunds"
      | "lockedBalance"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "setAttributeNum"
      | "setAttributeStr"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferEx"
      | "transferFrom"
      | "transferLockedFunds"
      | "transferOwnership"
      | "unlockFunds"
      | "unlockedBalance"
      | "verifyHTLC"
      | "verifyHTLCCancel"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "HTLCPaymentCreated"
      | "HTLCPaymentRemoved"
      | "OwnershipTransferred"
      | "Transfer"
      | "Whitelisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fullBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeNum",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeStr",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHTLCPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "iban", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [
      RecipentInfoStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeNum",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeStr",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEx",
    values: [RecipentInfoStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLockedFunds",
    values: [BytesLike, RecipentInfoStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockFunds",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyHTLC",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyHTLCCancel",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeStr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHTLCPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "iban", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeStr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferEx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLockedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyHTLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyHTLCCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCPaymentCreatedEvent {
  export type InputTuple = [
    id: BytesLike,
    hashlockPaid: BytesLike,
    htlc: IHTLCPayment.HTLCStruct
  ];
  export type OutputTuple = [
    id: string,
    hashlockPaid: string,
    htlc: IHTLCPayment.HTLCStructOutput
  ];
  export interface OutputObject {
    id: string;
    hashlockPaid: string;
    htlc: IHTLCPayment.HTLCStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCPaymentRemovedEvent {
  export type InputTuple = [
    id: BytesLike,
    amount: BigNumberish,
    deadline: BigNumberish,
    usingSecret: string,
    opaque: string,
    cancelled: boolean
  ];
  export type OutputTuple = [
    id: string,
    amount: bigint,
    deadline: bigint,
    usingSecret: string,
    opaque: string,
    cancelled: boolean
  ];
  export interface OutputObject {
    id: string;
    amount: bigint;
    deadline: bigint;
    usingSecret: string;
    opaque: string;
    cancelled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SoCashAccount extends BaseContract {
  connect(runner?: ContractRunner | null): SoCashAccount;
  waitForDeployment(): Promise<this>;

  interface: SoCashAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountNumber: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [arg0: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balance: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  bank: TypedContractMethod<[], [string], "view">;

  blacklist: TypedContractMethod<
    [oldSender: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  fullBalance: TypedContractMethod<[], [bigint], "view">;

  getAttributeNum: TypedContractMethod<[_name: BytesLike], [bigint], "view">;

  getAttributeStr: TypedContractMethod<[_name: BytesLike], [string], "view">;

  getHTLCPayment: TypedContractMethod<
    [id: BytesLike],
    [IHTLCPayment.HTLCStructOutput],
    "view"
  >;

  iban: TypedContractMethod<[], [string], "view">;

  isWhitelisted: TypedContractMethod<[a: AddressLike], [boolean], "view">;

  lockFunds: TypedContractMethod<
    [
      recipient: RecipentInfoStruct,
      amount: BigNumberish,
      deadline: BigNumberish,
      hashlockPaid: BytesLike,
      hashlockCancel: BytesLike,
      opaque: string
    ],
    [string],
    "nonpayable"
  >;

  lockedBalance: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAttributeNum: TypedContractMethod<
    [_name: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAttributeStr: TypedContractMethod<
    [_name: BytesLike, value: string],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferEx: TypedContractMethod<
    [recipient: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [arg0: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferLockedFunds: TypedContractMethod<
    [
      key: BytesLike,
      recipient: RecipentInfoStruct,
      secret: string,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockFunds: TypedContractMethod<
    [key: BytesLike, secret: string],
    [boolean],
    "nonpayable"
  >;

  unlockedBalance: TypedContractMethod<[], [bigint], "view">;

  verifyHTLC: TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  verifyHTLCCancel: TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;

  whitelist: TypedContractMethod<
    [newSender: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bank"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blacklist"
  ): TypedContractMethod<[oldSender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fullBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttributeNum"
  ): TypedContractMethod<[_name: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAttributeStr"
  ): TypedContractMethod<[_name: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getHTLCPayment"
  ): TypedContractMethod<
    [id: BytesLike],
    [IHTLCPayment.HTLCStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "iban"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[a: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockFunds"
  ): TypedContractMethod<
    [
      recipient: RecipentInfoStruct,
      amount: BigNumberish,
      deadline: BigNumberish,
      hashlockPaid: BytesLike,
      hashlockCancel: BytesLike,
      opaque: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockedBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAttributeNum"
  ): TypedContractMethod<
    [_name: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAttributeStr"
  ): TypedContractMethod<
    [_name: BytesLike, value: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferEx"
  ): TypedContractMethod<
    [recipient: RecipentInfoStruct, amount: BigNumberish, details: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [arg0: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferLockedFunds"
  ): TypedContractMethod<
    [
      key: BytesLike,
      recipient: RecipentInfoStruct,
      secret: string,
      details: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockFunds"
  ): TypedContractMethod<
    [key: BytesLike, secret: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockedBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyHTLC"
  ): TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyHTLCCancel"
  ): TypedContractMethod<
    [id: BytesLike, secret: string],
    [[boolean, string] & { ok: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[newSender: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "HTLCPaymentCreated"
  ): TypedContractEvent<
    HTLCPaymentCreatedEvent.InputTuple,
    HTLCPaymentCreatedEvent.OutputTuple,
    HTLCPaymentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCPaymentRemoved"
  ): TypedContractEvent<
    HTLCPaymentRemovedEvent.InputTuple,
    HTLCPaymentRemovedEvent.OutputTuple,
    HTLCPaymentRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Whitelisted"
  ): TypedContractEvent<
    WhitelistedEvent.InputTuple,
    WhitelistedEvent.OutputTuple,
    WhitelistedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "HTLCPaymentCreated(bytes32,bytes32,tuple)": TypedContractEvent<
      HTLCPaymentCreatedEvent.InputTuple,
      HTLCPaymentCreatedEvent.OutputTuple,
      HTLCPaymentCreatedEvent.OutputObject
    >;
    HTLCPaymentCreated: TypedContractEvent<
      HTLCPaymentCreatedEvent.InputTuple,
      HTLCPaymentCreatedEvent.OutputTuple,
      HTLCPaymentCreatedEvent.OutputObject
    >;

    "HTLCPaymentRemoved(bytes32,uint256,uint256,string,string,bool)": TypedContractEvent<
      HTLCPaymentRemovedEvent.InputTuple,
      HTLCPaymentRemovedEvent.OutputTuple,
      HTLCPaymentRemovedEvent.OutputObject
    >;
    HTLCPaymentRemoved: TypedContractEvent<
      HTLCPaymentRemovedEvent.InputTuple,
      HTLCPaymentRemovedEvent.OutputTuple,
      HTLCPaymentRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Whitelisted(address,bool)": TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
    Whitelisted: TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
  };
}

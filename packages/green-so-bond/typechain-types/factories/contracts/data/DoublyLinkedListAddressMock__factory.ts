/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DoublyLinkedListAddressMock,
  DoublyLinkedListAddressMockInterface,
} from "../../../contracts/data/DoublyLinkedListAddressMock";

const _abi = [
  {
    inputs: [],
    name: "DoublyLinkedList__InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "DoublyLinkedList__NonExistentEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevValue",
        type: "address",
      },
      {
        internalType: "address",
        name: "newValue",
        type: "address",
      },
    ],
    name: "insertAfter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nextValue",
        type: "address",
      },
      {
        internalType: "address",
        name: "newValue",
        type: "address",
      },
    ],
    name: "insertBefore",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "next",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pop",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "prev",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "push",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldValue",
        type: "address",
      },
      {
        internalType: "address",
        name: "newValue",
        type: "address",
      },
    ],
    name: "replace",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shift",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "unshift",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610b418061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063631de4d611610071578063631de4d61461018c57806380cea48a146101bc57806389b09de7146101ec578063a4ece52c1461021c578063ab73e3161461023a578063dc712cfd1461026a576100a9565b806312fc41ca146100ae57806329092d0e146100cc57806345788ce2146100fc5780635dbe47e81461012c578063622d77fb1461015c575b600080fd5b6100b661029a565b6040516100c39190610a1c565b60405180910390f35b6100e660048036038101906100e19190610a68565b6102ab565b6040516100f39190610ab0565b60405180910390f35b61011660048036038101906101119190610a68565b6102c8565b6040516101239190610a1c565b60405180910390f35b61014660048036038101906101419190610a68565b6102e5565b6040516101539190610ab0565b60405180910390f35b61017660048036038101906101719190610acb565b610302565b6040516101839190610ab0565b60405180910390f35b6101a660048036038101906101a19190610acb565b610322565b6040516101b39190610ab0565b60405180910390f35b6101d660048036038101906101d19190610acb565b610342565b6040516101e39190610ab0565b60405180910390f35b61020660048036038101906102019190610a68565b610362565b6040516102139190610ab0565b60405180910390f35b61022461037f565b6040516102319190610a1c565b60405180910390f35b610254600480360381019061024f9190610a68565b610390565b6040516102619190610a1c565b60405180910390f35b610284600480360381019061027f9190610a68565b6103ad565b6040516102919190610ab0565b60405180910390f35b60006102a660006103ca565b905090565b60006102c18260006103e290919063ffffffff16565b9050919050565b60006102de82600061041290919063ffffffff16565b9050919050565b60006102fb82600061044590919063ffffffff16565b9050919050565b600061031a838360006104759092919063ffffffff16565b905092915050565b600061033a838360006104c09092919063ffffffff16565b905092915050565b600061035a8383600061050b9092919063ffffffff16565b905092915050565b600061037882600061055690919063ffffffff16565b9050919050565b600061038b6000610586565b905090565b60006103a682600061059e90919063ffffffff16565b9050919050565b60006103c38260006105d190919063ffffffff16565b9050919050565b60006103d882600001610601565b60001c9050919050565b600061040a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610622565b905092915050565b600061043a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61068d565b60001c905092915050565b600061046d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61070e565b905092915050565b60006104b7846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8473ffffffffffffffffffffffffffffffffffffffff1660001b610765565b90509392505050565b6000610502846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8473ffffffffffffffffffffffffffffffffffffffff1660001b610785565b90509392505050565b600061054d846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8473ffffffffffffffffffffffffffffffffffffffff1660001b610827565b90509392505050565b600061057e836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610847565b905092915050565b60006105948260000161086c565b60001c9050919050565b60006105c6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61088d565b60001c905092915050565b60006105f9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61090e565b905092915050565b6000610610826000801b61088d565b905061061c8282610622565b50919050565b600061062e838361070e565b156106875761065083610641858561068d565b61064b868661088d565b610933565b8260010160008381526020019081526020016000206000905582600001600083815260200190815260200160002060009055600190505b92915050565b60008260010160008381526020019081526020016000205490506000801b82141580156106bc57506000801b81145b80156106d15750816106ce848361088d565b14155b15610708576040517f1ee3b12600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008060001b821415801561075d57506000801b8360000160008481526020019081526020016000205414158061075c5750818360010160008060001b815260200190815260200160002054145b5b905092915050565b600061077c84610775868661068d565b858561096c565b90509392505050565b6000610791848461070e565b6107c7576040517f1ee3b12600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107e5846107d5868661068d565b6107df878761088d565b8561096c565b905080156108205783600101600084815260200190815260200160002060009055836000016000848152602001908152602001600020600090555b9392505050565b600061083e8484610838878761088d565b8561096c565b90509392505050565b60006108648361085a856000801b61068d565b6000801b8561096c565b905092915050565b600061087b826000801b61068d565b90506108878282610622565b50919050565b60008260000160008381526020019081526020016000205490506000801b82141580156108bc57506000801b81145b80156108d15750816108ce848361068d565b14155b15610908576040517f1ee3b12600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b600061092b836000801b610925866000801b61088d565b8561096c565b905092915050565b80836000016000848152602001908152602001600020819055508183600101600083815260200190815260200160002081905550505050565b60008060001b82036109aa576040517f2ea5817800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b4858361070e565b6109d3576109c3858584610933565b6109ce858385610933565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a06826109db565b9050919050565b610a16816109fb565b82525050565b6000602082019050610a316000830184610a0d565b92915050565b600080fd5b610a45816109fb565b8114610a5057600080fd5b50565b600081359050610a6281610a3c565b92915050565b600060208284031215610a7e57610a7d610a37565b5b6000610a8c84828501610a53565b91505092915050565b60008115159050919050565b610aaa81610a95565b82525050565b6000602082019050610ac56000830184610aa1565b92915050565b60008060408385031215610ae257610ae1610a37565b5b6000610af085828601610a53565b9250506020610b0185828601610a53565b915050925092905056fea264697066735822122024789e32d386b73dd38bd3a197531cc925c95041ff41cb6f00765d39981164d964736f6c634300081b0033";

type DoublyLinkedListAddressMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DoublyLinkedListAddressMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DoublyLinkedListAddressMock__factory extends ContractFactory {
  constructor(...args: DoublyLinkedListAddressMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DoublyLinkedListAddressMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): DoublyLinkedListAddressMock__factory {
    return super.connect(runner) as DoublyLinkedListAddressMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DoublyLinkedListAddressMockInterface {
    return new Interface(_abi) as DoublyLinkedListAddressMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DoublyLinkedListAddressMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as DoublyLinkedListAddressMock;
  }
}

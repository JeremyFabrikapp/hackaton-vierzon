/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EnumerableMapAddressToAddressMock,
  EnumerableMapAddressToAddressMockInterface,
} from "../../../contracts/data/EnumerableMapAddressToAddressMock";

const _abi = [
  {
    inputs: [],
    name: "EnumerableMap__IndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "EnumerableMap__NonExistentKey",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "at",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "keys",
    outputs: [
      {
        internalType: "address[]",
        name: "keysOut",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "set",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toArray",
    outputs: [
      {
        internalType: "address[]",
        name: "keysOut",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "valuesOut",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "values",
    outputs: [
      {
        internalType: "address[]",
        name: "valuesOut",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610ea68061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806389675cac1161006657806389675cac14610134578063908ff30314610164578063971217b714610183578063c2bc2efc146101a1578063e0886f90146101d157610093565b80631f7b6d321461009857806329092d0e146100b6578063307540f6146100e65780635dbe47e814610104575b600080fd5b6100a0610202565b6040516100ad9190610aff565b60405180910390f35b6100d060048036038101906100cb9190610b7d565b610213565b6040516100dd9190610bc5565b60405180910390f35b6100ee610230565b6040516100fb9190610c9e565b60405180910390f35b61011e60048036038101906101199190610b7d565b610241565b60405161012b9190610bc5565b60405180910390f35b61014e60048036038101906101499190610cc0565b61025e565b60405161015b9190610bc5565b60405180910390f35b61016c61027e565b60405161017a929190610d00565b60405180910390f35b61018b610297565b6040516101989190610c9e565b60405180910390f35b6101bb60048036038101906101b69190610b7d565b6102a8565b6040516101c89190610d46565b60405180910390f35b6101eb60048036038101906101e69190610d8d565b6102c5565b6040516101f9929190610dba565b60405180910390f35b600061020e60006102e5565b905090565b60006102298260006102fa90919063ffffffff16565b9050919050565b606061023c600061032a565b905090565b600061025782600061041e90919063ffffffff16565b9050919050565b60006102768383600061044e9092919063ffffffff16565b905092915050565b60608061028b6000610499565b80925081935050509091565b60606102a36000610654565b905090565b60006102be82600061074890919063ffffffff16565b9050919050565b6000806102dc83600061077b90919063ffffffff16565b91509150915091565b60006102f3826000016107a7565b9050919050565b6000610322836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6107b8565b905092915050565b60606000826000016000018054905090508067ffffffffffffffff81111561035557610354610de3565b5b6040519080825280602002602001820160405280156103835781602001602082028036833780820191505090505b50915060005b81811015610417578360000160000181815481106103aa576103a9610e12565b5b90600052602060002090600202016000015460001c8382815181106103d2576103d1610e12565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806001019050610389565b5050919050565b6000610446836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6108d7565b905092915050565b6000610490846000018473ffffffffffffffffffffffffffffffffffffffff1660001b8473ffffffffffffffffffffffffffffffffffffffff1660001b6108fa565b90509392505050565b6060806000836000016000018054905090508067ffffffffffffffff8111156104c5576104c4610de3565b5b6040519080825280602002602001820160405280156104f35781602001602082028036833780820191505090505b5092508067ffffffffffffffff8111156105105761050f610de3565b5b60405190808252806020026020018201604052801561053e5781602001602082028036833780820191505090505b50915060005b8181101561064d5784600001600001818154811061056557610564610e12565b5b90600052602060002090600202016000015460001c84828151811061058d5761058c610e12565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508460000160000181815481106105e0576105df610e12565b5b90600052602060002090600202016001015460001c83828151811061060857610607610e12565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806001019050610544565b5050915091565b60606000826000016000018054905090508067ffffffffffffffff81111561067f5761067e610de3565b5b6040519080825280602002602001820160405280156106ad5781602001602082028036833780820191505090505b50915060005b81811015610741578360000160000181815481106106d4576106d3610e12565b5b90600052602060002090600202016001015460001c8382815181106106fc576106fb610e12565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060010190506106b3565b5050919050565b6000610770836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6109dc565b60001c905092915050565b60008060008061078e8660000186610a65565b915091508160001c8160001c9350935050509250929050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020549050600081146108cb576000846000016001866000018054905003815481106107fd576107fc610e12565b5b906000526020600020906002020190508085600001600184038154811061082757610826610e12565b5b90600052602060002090600202016000820154816000015560018201548160010155905050818560010160008360000154815260200190815260200160002081905550508360000180548061087f5761087e610e41565b5b60019003818190600052602060002090600202016000808201600090556001820160009055505090558360010160008481526020019081526020016000206000905560019150506108d1565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080846001016000858152602001908152602001600020549050600081036109a0578460000160405180604001604052808681526020018581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505084600001805490508560010160008681526020019081526020016000208190555060019150506109d5565b828560000160018303815481106109ba576109b9610e12565b5b90600052602060002090600202016001018190555060009150505b9392505050565b60008083600101600084815260200190815260200160002054905060008103610a31576040517ff551fb1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836000016001820381548110610a4a57610a49610e12565b5b90600052602060002090600202016001015491505092915050565b60008083600001805490508310610aa8576040517f117ec13800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000846000018481548110610ac057610abf610e12565b5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000819050919050565b610af981610ae6565b82525050565b6000602082019050610b146000830184610af0565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4a82610b1f565b9050919050565b610b5a81610b3f565b8114610b6557600080fd5b50565b600081359050610b7781610b51565b92915050565b600060208284031215610b9357610b92610b1a565b5b6000610ba184828501610b68565b91505092915050565b60008115159050919050565b610bbf81610baa565b82525050565b6000602082019050610bda6000830184610bb6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c1581610b3f565b82525050565b6000610c278383610c0c565b60208301905092915050565b6000602082019050919050565b6000610c4b82610be0565b610c558185610beb565b9350610c6083610bfc565b8060005b83811015610c91578151610c788882610c1b565b9750610c8383610c33565b925050600181019050610c64565b5085935050505092915050565b60006020820190508181036000830152610cb88184610c40565b905092915050565b60008060408385031215610cd757610cd6610b1a565b5b6000610ce585828601610b68565b9250506020610cf685828601610b68565b9150509250929050565b60006040820190508181036000830152610d1a8185610c40565b90508181036020830152610d2e8184610c40565b90509392505050565b610d4081610b3f565b82525050565b6000602082019050610d5b6000830184610d37565b92915050565b610d6a81610ae6565b8114610d7557600080fd5b50565b600081359050610d8781610d61565b92915050565b600060208284031215610da357610da2610b1a565b5b6000610db184828501610d78565b91505092915050565b6000604082019050610dcf6000830185610d37565b610ddc6020830184610d37565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212203e9a7d464bb8354a99f4357880cac12bdf980feb9c9ea89ecf37d6791bc6071864736f6c634300081b0033";

type EnumerableMapAddressToAddressMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EnumerableMapAddressToAddressMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EnumerableMapAddressToAddressMock__factory extends ContractFactory {
  constructor(...args: EnumerableMapAddressToAddressMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EnumerableMapAddressToAddressMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): EnumerableMapAddressToAddressMock__factory {
    return super.connect(runner) as EnumerableMapAddressToAddressMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EnumerableMapAddressToAddressMockInterface {
    return new Interface(_abi) as EnumerableMapAddressToAddressMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EnumerableMapAddressToAddressMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as EnumerableMapAddressToAddressMock;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BinaryHeapAddressMock,
  BinaryHeapAddressMockInterface,
} from "../../../contracts/data/BinaryHeapAddressMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "at",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "indexOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "toArray",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610b2c8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063908ff3031161005b578063908ff3031461013b578063e0886f9014610159578063ebf0c71714610189578063fd6aad25146101a757610088565b80630a3b0a4f1461008d5780631f7b6d32146100bd57806329092d0e146100db5780635dbe47e81461010b575b600080fd5b6100a760048036038101906100a2919061086f565b6101d7565b6040516100b491906108b7565b60405180910390f35b6100c56101f4565b6040516100d291906108eb565b60405180910390f35b6100f560048036038101906100f0919061086f565b610205565b60405161010291906108b7565b60405180910390f35b6101256004803603810190610120919061086f565b610222565b60405161013291906108b7565b60405180910390f35b61014361023f565b60405161015091906109c4565b60405180910390f35b610173600480360381019061016e9190610a12565b610250565b6040516101809190610a4e565b60405180910390f35b61019161026d565b60405161019e9190610a4e565b60405180910390f35b6101c160048036038101906101bc919061086f565b61027e565b6040516101ce91906108eb565b60405180910390f35b60006101ed82600061029b90919063ffffffff16565b9050919050565b600061020060006102cb565b905090565b600061021b8260006102e090919063ffffffff16565b9050919050565b600061023882600061031090919063ffffffff16565b9050919050565b606061024b6000610340565b905090565b60006102668260006103e190919063ffffffff16565b9050919050565b600061027960006103fb565b905090565b600061029482600061041390919063ffffffff16565b9050919050565b60006102c3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610443565b905092915050565b60006102d9826000016104b4565b9050919050565b6000610308836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6104c5565b905092915050565b6000610338836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610552565b905092915050565b606060008260000160000190506000819050808054806020026020016040519081016040528092919081815260200182805480156103d357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610389575b505050505092505050919050565b60006103f08360000183610575565b60001c905092915050565b6000610409826000016105a0565b60001c9050919050565b600061043b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6105b4565b905092915050565b600061044f8383610552565b6104ae5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055610487836104b4565b836001016000848152602001908152602001600020819055506104a9836105d7565b600190505b92915050565b600081600001805490509050919050565b60006104d18383610552565b1561054c5760006104e284846105b4565b90506104fa848260016104f4886104b4565b03610620565b8360000180548061050e5761050d610a69565b5b6001900381819060005260206000200160009055905583600101600084815260200190815260200160002060009055610546846105d7565b60019150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600082600001828154811061058d5761058c610a98565b5b9060005260206000200154905092915050565b60006105ad826000610575565b9050919050565b600060018360010160008481526020019081526020016000205403905092915050565b60006105e2826104b4565b90506000600282816105f7576105f6610ac7565b5b0490505b600081111561061b5761061683838360019003935083610723565b6105fb565b505050565b6000836000019050600081848154811061063d5761063c610a98565b5b90600052602060002001549050600082848154811061065f5761065e610a98565b5b90600052602060002001549050808284878154811061068157610680610a98565b5b9060005260206000200160008688815481106106a05761069f610a98565b5b906000526020600020016000849190505583919050555050600086600101905080600083815260200190815260200160002054816000858152602001908152602001600020548260008681526020019081526020016000206000846000878152602001908152602001600020600084919050558391905055505050505050505050565b60008190506000846000019050600060018085901b1790506000600182019050858210801561078b57508282815481106107605761075f610a98565b5b906000526020600020015483858154811061077e5761077d610a98565b5b9060005260206000200154105b15610794578193505b85811080156107dc57508281815481106107b1576107b0610a98565b5b90600052602060002001548385815481106107cf576107ce610a98565b5b9060005260206000200154105b156107e5578093505b5050828214610805576107f9858484610620565b610804858584610723565b5b5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083c82610811565b9050919050565b61084c81610831565b811461085757600080fd5b50565b60008135905061086981610843565b92915050565b6000602082840312156108855761088461080c565b5b60006108938482850161085a565b91505092915050565b60008115159050919050565b6108b18161089c565b82525050565b60006020820190506108cc60008301846108a8565b92915050565b6000819050919050565b6108e5816108d2565b82525050565b600060208201905061090060008301846108dc565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61093b81610831565b82525050565b600061094d8383610932565b60208301905092915050565b6000602082019050919050565b600061097182610906565b61097b8185610911565b935061098683610922565b8060005b838110156109b757815161099e8882610941565b97506109a983610959565b92505060018101905061098a565b5085935050505092915050565b600060208201905081810360008301526109de8184610966565b905092915050565b6109ef816108d2565b81146109fa57600080fd5b50565b600081359050610a0c816109e6565b92915050565b600060208284031215610a2857610a2761080c565b5b6000610a36848285016109fd565b91505092915050565b610a4881610831565b82525050565b6000602082019050610a636000830184610a3f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea264697066735822122086b620deea7753a76f2c8f494061589ef46f71676b9defd4a2af0d934ed69fff64736f6c634300081b0033";

type BinaryHeapAddressMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BinaryHeapAddressMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BinaryHeapAddressMock__factory extends ContractFactory {
  constructor(...args: BinaryHeapAddressMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BinaryHeapAddressMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BinaryHeapAddressMock__factory {
    return super.connect(runner) as BinaryHeapAddressMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BinaryHeapAddressMockInterface {
    return new Interface(_abi) as BinaryHeapAddressMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BinaryHeapAddressMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BinaryHeapAddressMock;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EnumerableMapUintToAddressMock,
  EnumerableMapUintToAddressMockInterface,
} from "../../../contracts/data/EnumerableMapUintToAddressMock";

const _abi = [
  {
    inputs: [],
    name: "EnumerableMap__IndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "EnumerableMap__NonExistentKey",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "at",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "keys",
    outputs: [
      {
        internalType: "uint256[]",
        name: "keysOut",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "set",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toArray",
    outputs: [
      {
        internalType: "uint256[]",
        name: "keysOut",
        type: "uint256[]",
      },
      {
        internalType: "address[]",
        name: "valuesOut",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "values",
    outputs: [
      {
        internalType: "address[]",
        name: "valuesOut",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610ea58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063908ff30311610066578063908ff303146101345780639507d39a14610153578063971217b714610183578063c34052e0146101a1578063e0886f90146101d157610093565b80631f7b6d32146100985780632f30c6f6146100b6578063307540f6146100e65780634cc8221514610104575b600080fd5b6100a0610202565b6040516100ad9190610a4b565b60405180910390f35b6100d060048036038101906100cb9190610af5565b610213565b6040516100dd9190610b50565b60405180910390f35b6100ee610233565b6040516100fb9190610c29565b60405180910390f35b61011e60048036038101906101199190610c4b565b610244565b60405161012b9190610b50565b60405180910390f35b61013c610261565b60405161014a929190610d36565b60405180910390f35b61016d60048036038101906101689190610c4b565b61027a565b60405161017a9190610d7c565b60405180910390f35b61018b610297565b6040516101989190610d97565b60405180910390f35b6101bb60048036038101906101b69190610c4b565b6102a8565b6040516101c89190610b50565b60405180910390f35b6101eb60048036038101906101e69190610c4b565b6102c5565b6040516101f9929190610db9565b60405180910390f35b600061020e60006102e5565b905090565b600061022b838360006102fa9092919063ffffffff16565b905092915050565b606061023f600061032f565b905090565b600061025a8260006103f590919063ffffffff16565b9050919050565b60608061026e600061040f565b80925081935050509091565b600061029082600061059c90919063ffffffff16565b9050919050565b60606102a360006105b9565b905090565b60006102be8260006106ad90919063ffffffff16565b9050919050565b6000806102dc8360006106c790919063ffffffff16565b91509150915091565b60006102f3826000016106f3565b9050919050565b6000610326846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b610704565b90509392505050565b60606000826000016000018054905090508067ffffffffffffffff81111561035a57610359610de2565b5b6040519080825280602002602001820160405280156103885781602001602082028036833780820191505090505b50915060005b818110156103ee578360000160000181815481106103af576103ae610e11565b5b90600052602060002090600202016000015460001c8382815181106103d7576103d6610e11565b5b60200260200101818152505080600101905061038e565b5050919050565b6000610407836000018360001b6107e6565b905092915050565b6060806000836000016000018054905090508067ffffffffffffffff81111561043b5761043a610de2565b5b6040519080825280602002602001820160405280156104695781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561048657610485610de2565b5b6040519080825280602002602001820160405280156104b45781602001602082028036833780820191505090505b50915060005b81811015610595578460000160000181815481106104db576104da610e11565b5b90600052602060002090600202016000015460001c84828151811061050357610502610e11565b5b60200260200101818152505084600001600001818154811061052857610527610e11565b5b90600052602060002090600202016001015460001c8382815181106105505761054f610e11565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060010190506104ba565b5050915091565b60006105ae836000018360001b610905565b60001c905092915050565b60606000826000016000018054905090508067ffffffffffffffff8111156105e4576105e3610de2565b5b6040519080825280602002602001820160405280156106125781602001602082028036833780820191505090505b50915060005b818110156106a65783600001600001818154811061063957610638610e11565b5b90600052602060002090600202016001015460001c83828151811061066157610660610e11565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806001019050610618565b5050919050565b60006106bf836000018360001b61098e565b905092915050565b6000806000806106da86600001866109b1565b915091508160001c8160001c9350935050509250929050565b600081600001805490509050919050565b600080846001016000858152602001908152602001600020549050600081036107aa578460000160405180604001604052808681526020018581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505084600001805490508560010160008681526020019081526020016000208190555060019150506107df565b828560000160018303815481106107c4576107c3610e11565b5b90600052602060002090600202016001018190555060009150505b9392505050565b600080836001016000848152602001908152602001600020549050600081146108f95760008460000160018660000180549050038154811061082b5761082a610e11565b5b906000526020600020906002020190508085600001600184038154811061085557610854610e11565b5b9060005260206000209060020201600082015481600001556001820154816001015590505081856001016000836000015481526020019081526020016000208190555050836000018054806108ad576108ac610e40565b5b60019003818190600052602060002090600202016000808201600090556001820160009055505090558360010160008481526020019081526020016000206000905560019150506108ff565b60009150505b92915050565b6000808360010160008481526020019081526020016000205490506000810361095a576040517ff551fb1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600001600182038154811061097357610972610e11565b5b90600052602060002090600202016001015491505092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836000018054905083106109f4576040517f117ec13800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000846000018481548110610a0c57610a0b610e11565b5b906000526020600020906002020190508060000154816001015492509250509250929050565b6000819050919050565b610a4581610a32565b82525050565b6000602082019050610a606000830184610a3c565b92915050565b600080fd5b610a7481610a32565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac282610a97565b9050919050565b610ad281610ab7565b8114610add57600080fd5b50565b600081359050610aef81610ac9565b92915050565b60008060408385031215610b0c57610b0b610a66565b5b6000610b1a85828601610a82565b9250506020610b2b85828601610ae0565b9150509250929050565b60008115159050919050565b610b4a81610b35565b82525050565b6000602082019050610b656000830184610b41565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ba081610a32565b82525050565b6000610bb28383610b97565b60208301905092915050565b6000602082019050919050565b6000610bd682610b6b565b610be08185610b76565b9350610beb83610b87565b8060005b83811015610c1c578151610c038882610ba6565b9750610c0e83610bbe565b925050600181019050610bef565b5085935050505092915050565b60006020820190508181036000830152610c438184610bcb565b905092915050565b600060208284031215610c6157610c60610a66565b5b6000610c6f84828501610a82565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610cad81610ab7565b82525050565b6000610cbf8383610ca4565b60208301905092915050565b6000602082019050919050565b6000610ce382610c78565b610ced8185610c83565b9350610cf883610c94565b8060005b83811015610d29578151610d108882610cb3565b9750610d1b83610ccb565b925050600181019050610cfc565b5085935050505092915050565b60006040820190508181036000830152610d508185610bcb565b90508181036020830152610d648184610cd8565b90509392505050565b610d7681610ab7565b82525050565b6000602082019050610d916000830184610d6d565b92915050565b60006020820190508181036000830152610db18184610cd8565b905092915050565b6000604082019050610dce6000830185610a3c565b610ddb6020830184610d6d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220eefda227ddc864fedc9d10b49dc50e3da57e812159977465448a485b3bc32e5264736f6c634300081b0033";

type EnumerableMapUintToAddressMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EnumerableMapUintToAddressMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EnumerableMapUintToAddressMock__factory extends ContractFactory {
  constructor(...args: EnumerableMapUintToAddressMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EnumerableMapUintToAddressMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): EnumerableMapUintToAddressMock__factory {
    return super.connect(runner) as EnumerableMapUintToAddressMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EnumerableMapUintToAddressMockInterface {
    return new Interface(_abi) as EnumerableMapUintToAddressMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EnumerableMapUintToAddressMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as EnumerableMapUintToAddressMock;
  }
}

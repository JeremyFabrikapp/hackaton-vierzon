/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  IncrementalMerkleTreeMock,
  IncrementalMerkleTreeMockInterface,
} from "../../../contracts/data/IncrementalMerkleTreeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "at",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "height",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "push",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "size",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506109628061001f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a4ece52c1161005b578063a4ece52c146100da578063b298e36b146100e4578063e0886f9014610100578063ebf0c717146101305761007d565b80630ef267431461008257806364c4ef1a146100a0578063949d225d146100bc575b600080fd5b61008a61014e565b6040516100979190610680565b60405180910390f35b6100ba60048036038101906100b59190610702565b61015f565b005b6100c4610179565b6040516100d19190610680565b60405180910390f35b6100e261018a565b005b6100fe60048036038101906100f99190610742565b610196565b005b61011a6004803603810190610115919061076f565b6101ad565b60405161012791906107ab565b60405180910390f35b6101386101ca565b60405161014591906107ab565b60405180910390f35b600061015a60006101db565b905090565b610175828260006101ec9092919063ffffffff16565b5050565b6000610185600061020d565b905090565b610194600061024c565b565b6101aa8160006103ba90919063ffffffff16565b50565b60006101c38260006104b590919063ffffffff16565b9050919050565b60006101d660006104fd565b905090565b600081600001805490509050919050565b610208836000016000846001610201886101db565b038561055e565b505050565b600080610219836101db565b11156102475781600001600081548110610236576102356107c6565b5b906000526020600020018054905090505b919050565b6000610257826101db565b9050600060016102668461020d565b6102709190610824565b90506002826001901b901c81036102c257818061028c90610858565b925050826000018054806102a3576102a2610881565b5b6001900381819060005260206000200160006102bf9190610629565b90555b6000808290505b83821080156102fa5750808560000183815481106102ea576102e96107c6565b5b9060005260206000200180549050115b1561036a57846000018281548110610315576103146107c6565b5b9060005260206000200180548061032f5761032e610881565b5b600190038181906000526020600020016000905590558180610350906108b0565b9250506001808261036191906108f8565b901c90506102c9565b60008311156103b3576103b26001846103839190610824565b6103a26001866103939190610824565b886104b590919063ffffffff16565b876101ec9092919063ffffffff16565b5b5050505050565b60006103c5836101db565b905060006103d28461020d565b90506001826001901b901c810361040b578360000160018160018154018082558091505003906000526020600020505081806001019250505b6000808290505b8382108015610444575080866000018381548110610433576104326107c6565b5b906000526020600020018054905011155b156104985785600001828154811061045f5761045e6107c6565b5b906000526020600020016001816001815401808255809150500390600052602060002050508180600101925050600181901c9050610412565b6104ad8386886101ec9092919063ffffffff16565b505050505050565b6000826000016000815481106104ce576104cd6107c6565b5b9060005260206000200182815481106104ea576104e96107c6565b5b9060005260206000200154905092915050565b600080610509836101db565b905060008111156105585782600001600182038154811061052d5761052c6107c6565b5b9060005260206000200160008154811061054a576105496107c6565b5b906000526020600020015491505b50919050565b6000858581548110610573576105726107c6565b5b90600052602060002001905081818581548110610593576105926107c6565b5b90600052602060002001819055508285036105ae5750610622565b6001808516036105dc578060005260018403602060002001548060005282602052604060002092505061060c565b808054905060018501101561060b57806000526001840160206000200154826000528060205260406000209250505b5b6106208660018701600187901c868661055e565b505b5050505050565b5080546000825590600052602060002090810190610647919061064a565b50565b5b8082111561066357600081600090555060010161064b565b5090565b6000819050919050565b61067a81610667565b82525050565b60006020820190506106956000830184610671565b92915050565b600080fd5b6106a981610667565b81146106b457600080fd5b50565b6000813590506106c6816106a0565b92915050565b6000819050919050565b6106df816106cc565b81146106ea57600080fd5b50565b6000813590506106fc816106d6565b92915050565b600080604083850312156107195761071861069b565b5b6000610727858286016106b7565b9250506020610738858286016106ed565b9150509250929050565b6000602082840312156107585761075761069b565b5b6000610766848285016106ed565b91505092915050565b6000602082840312156107855761078461069b565b5b6000610793848285016106b7565b91505092915050565b6107a5816106cc565b82525050565b60006020820190506107c0600083018461079c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061082f82610667565b915061083a83610667565b9250828203905081811115610852576108516107f5565b5b92915050565b600061086382610667565b915060008203610876576108756107f5565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006108bb82610667565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108ed576108ec6107f5565b5b600182019050919050565b600061090382610667565b915061090e83610667565b9250828201905080821115610926576109256107f5565b5b9291505056fea2646970667358221220265fea43b51fa3d2054d796949e1db89fbf434cdaddbcae42fa97d6ddf080f8c64736f6c634300081b0033";

type IncrementalMerkleTreeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IncrementalMerkleTreeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IncrementalMerkleTreeMock__factory extends ContractFactory {
  constructor(...args: IncrementalMerkleTreeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      IncrementalMerkleTreeMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): IncrementalMerkleTreeMock__factory {
    return super.connect(runner) as IncrementalMerkleTreeMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IncrementalMerkleTreeMockInterface {
    return new Interface(_abi) as IncrementalMerkleTreeMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IncrementalMerkleTreeMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IncrementalMerkleTreeMock;
  }
}

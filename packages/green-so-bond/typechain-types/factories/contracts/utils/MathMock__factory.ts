/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MathMock,
  MathMockInterface,
} from "../../../contracts/utils/MathMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "abs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "average",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "sqrt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506104d68061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631b5ac4b51461005c5780632b7423ab1461008c578063677342ce146100bc5780636d5433e6146100ec5780637ae2b5c71461011c575b600080fd5b6100766004803603810190610071919061029b565b61014c565b60405161008391906102e1565b60405180910390f35b6100a660048036038101906100a19190610328565b61015e565b6040516100b391906102e1565b60405180910390f35b6100d660048036038101906100d19190610368565b610172565b6040516100e391906102e1565b60405180910390f35b61010660048036038101906101019190610328565b610184565b60405161011391906102e1565b60405180910390f35b61013660048036038101906101319190610328565b610198565b60405161014391906102e1565b60405180910390f35b6000610157826101ac565b9050919050565b600061016a83836101cd565b905092915050565b600061017d826101e2565b9050919050565b6000610190838361022e565b905092915050565b60006101a48383610247565b905092915050565b60008082126101bb57816101c6565b816101c5906103c4565b5b9050919050565b60006001828418901c82841601905092915050565b600080600180846101f3919061040c565b901c90508291505b81811015610228578091506001818285610215919061046f565b61021f919061040c565b901c90506101fb565b50919050565b600081831161023d578161023f565b825b905092915050565b60008183116102565782610258565b815b905092915050565b600080fd5b6000819050919050565b61027881610265565b811461028357600080fd5b50565b6000813590506102958161026f565b92915050565b6000602082840312156102b1576102b0610260565b5b60006102bf84828501610286565b91505092915050565b6000819050919050565b6102db816102c8565b82525050565b60006020820190506102f660008301846102d2565b92915050565b610305816102c8565b811461031057600080fd5b50565b600081359050610322816102fc565b92915050565b6000806040838503121561033f5761033e610260565b5b600061034d85828601610313565b925050602061035e85828601610313565b9150509250929050565b60006020828403121561037e5761037d610260565b5b600061038c84828501610313565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103cf82610265565b91507f8000000000000000000000000000000000000000000000000000000000000000820361040157610400610395565b5b816000039050919050565b6000610417826102c8565b9150610422836102c8565b925082820190508082111561043a57610439610395565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061047a826102c8565b9150610485836102c8565b92508261049557610494610440565b5b82820490509291505056fea2646970667358221220236de247c8adbdc8ca0afbb4ec9d2d10146538d92b6eb98d14ba3d047171ad2864736f6c634300081b0033";

type MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathMock__factory extends ContractFactory {
  constructor(...args: MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MathMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MathMock__factory {
    return super.connect(runner) as MathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathMockInterface {
    return new Interface(_abi) as MathMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MathMock {
    return new Contract(address, _abi, runner) as unknown as MathMock;
  }
}

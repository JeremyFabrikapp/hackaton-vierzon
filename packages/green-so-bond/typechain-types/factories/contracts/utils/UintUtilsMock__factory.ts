/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  UintUtilsMock,
  UintUtilsMockInterface,
} from "../../../contracts/utils/UintUtilsMock";

const _abi = [
  {
    inputs: [],
    name: "UintUtils__InsufficientHexLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "sub",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "toHexString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "toHexString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "toString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610ab58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632835a36d1461005c57806363e1cbea1461008c5780636900a3ae146100bc578063784cfccd146100ec5780638fba8d5c1461011c575b600080fd5b6100766004803603810190610071919061069e565b61014c565b60405161008391906106ed565b60405180910390f35b6100a660048036038101906100a19190610708565b610169565b6040516100b391906107d8565b60405180910390f35b6100d660048036038101906100d191906107fa565b610186565b6040516100e391906107d8565b60405180910390f35b6101066004803603810190610101919061069e565b610198565b60405161011391906106ed565b60405180910390f35b610136600480360381019061013191906107fa565b6101b5565b60405161014391906107d8565b60405180910390f35b600061016182846101c790919063ffffffff16565b905092915050565b606061017e82846101fd90919063ffffffff16565b905092915050565b606061019182610419565b9050919050565b60006101ad828461057990919063ffffffff16565b905092915050565b60606101c0826105af565b9050919050565b60008082126101e15781836101dc9190610856565b6101f5565b6101f483836101ef9061088a565b610579565b5b905092915050565b60606000600283600261021091906108d2565b61021a9190610856565b67ffffffffffffffff81111561023357610232610914565b5b6040519080825280601f01601f1916602001820160405280156102655781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061029d5761029c610943565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061030157610300610943565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002020190505b60018111156103d4577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061037b5761037a610943565b5b1a60f81b82828151811061039257610391610943565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508060019003905061033c565b506000841461040f576040517fc913478500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b606060008203610460576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610574565b600082905060005b6000821461049257808061047b90610972565b915050600a8261048b91906109e9565b9150610468565b60008167ffffffffffffffff8111156104ae576104ad610914565b5b6040519080825280601f01601f1916602001820160405280156104e05781602001600182028036833780820191505090505b5090505b6000851461056d576001826104f99190610a1a565b9150600a856105089190610a4e565b60306105149190610856565b60f81b81838151811061052a57610529610943565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561056691906109e9565b94506104e4565b8093505050505b919050565b600080821261059357818361058e9190610a1a565b6105a7565b6105a683836105a19061088a565b6101c7565b5b905092915050565b6060600082036105f6576040518060400160405280600481526020017f30783030000000000000000000000000000000000000000000000000000000008152509050610628565b6000808390505b60008114610619578180600101925050600881901c90506105fd565b5061062483826101fd565b9150505b919050565b600080fd5b6000819050919050565b61064581610632565b811461065057600080fd5b50565b6000813590506106628161063c565b92915050565b6000819050919050565b61067b81610668565b811461068657600080fd5b50565b60008135905061069881610672565b92915050565b600080604083850312156106b5576106b461062d565b5b60006106c385828601610653565b92505060206106d485828601610689565b9150509250929050565b6106e781610632565b82525050565b600060208201905061070260008301846106de565b92915050565b6000806040838503121561071f5761071e61062d565b5b600061072d85828601610653565b925050602061073e85828601610653565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610782578082015181840152602081019050610767565b60008484015250505050565b6000601f19601f8301169050919050565b60006107aa82610748565b6107b48185610753565b93506107c4818560208601610764565b6107cd8161078e565b840191505092915050565b600060208201905081810360008301526107f2818461079f565b905092915050565b6000602082840312156108105761080f61062d565b5b600061081e84828501610653565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061086182610632565b915061086c83610632565b925082820190508082111561088457610883610827565b5b92915050565b600061089582610668565b91507f800000000000000000000000000000000000000000000000000000000000000082036108c7576108c6610827565b5b816000039050919050565b60006108dd82610632565b91506108e883610632565b92508282026108f681610632565b9150828204841483151761090d5761090c610827565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061097d82610632565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109af576109ae610827565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109f482610632565b91506109ff83610632565b925082610a0f57610a0e6109ba565b5b828204905092915050565b6000610a2582610632565b9150610a3083610632565b9250828203905081811115610a4857610a47610827565b5b92915050565b6000610a5982610632565b9150610a6483610632565b925082610a7457610a736109ba565b5b82820690509291505056fea2646970667358221220de4798fc1c44d9c010e8a71fbd6057ba479d62d00848706fc84285e179cfb22964736f6c634300081b0033";

type UintUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UintUtilsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UintUtilsMock__factory extends ContractFactory {
  constructor(...args: UintUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UintUtilsMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UintUtilsMock__factory {
    return super.connect(runner) as UintUtilsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UintUtilsMockInterface {
    return new Interface(_abi) as UintUtilsMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UintUtilsMock {
    return new Contract(address, _abi, runner) as unknown as UintUtilsMock;
  }
}

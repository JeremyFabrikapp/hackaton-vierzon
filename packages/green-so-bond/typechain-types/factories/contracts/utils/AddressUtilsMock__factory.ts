/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AddressUtilsMock,
  AddressUtilsMockInterface,
} from "../../../contracts/utils/AddressUtilsMock";

const _abi = [
  {
    inputs: [],
    name: "AddressUtils__InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressUtils__NotContract",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressUtils__SendValueFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "UintUtils__InsufficientHexLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
    ],
    name: "functionCall",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "functionCall",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "functionCallWithValue",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
    ],
    name: "functionCallWithValue",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "toString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506110628061001f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80632a0115941161005b5780632a011594146100fe57806356ca623e1461012e578063a0b5ffb01461015e578063d525ab8a1461018e5761007d565b80631627905514610082578063241b5886146100b257806324a084df146100e2575b600080fd5b61009c6004803603810190610097919061086e565b6101be565b6040516100a991906108b6565b60405180910390f35b6100cc60048036038101906100c79190610ab8565b6101e6565b6040516100d99190610bc2565b60405180910390f35b6100fc60048036038101906100f79190610c58565b61021c565b005b61011860048036038101906101139190610c98565b610249565b6040516101259190610bc2565b60405180910390f35b6101486004803603810190610143919061086e565b61027f565b6040516101559190610d5c565b60405180910390f35b61017860048036038101906101739190610d7e565b6102a7565b6040516101859190610bc2565b60405180910390f35b6101a860048036038101906101a39190610dda565b6102da565b6040516101b59190610bc2565b60405180910390f35b60006101df8273ffffffffffffffffffffffffffffffffffffffff16610313565b9050919050565b606061021383838673ffffffffffffffffffffffffffffffffffffffff166103269092919063ffffffff16565b90509392505050565b610245818373ffffffffffffffffffffffffffffffffffffffff1661033e90919063ffffffff16565b5050565b606061027683838673ffffffffffffffffffffffffffffffffffffffff166103e69092919063ffffffff16565b90509392505050565b60606102a08273ffffffffffffffffffffffffffffffffffffffff16610415565b9050919050565b60606102d2828473ffffffffffffffffffffffffffffffffffffffff1661044890919063ffffffff16565b905092915050565b60606103098484848873ffffffffffffffffffffffffffffffffffffffff16610475909392919063ffffffff16565b9050949350505050565b600080823b905060008111915050919050565b606061033584846000856104c7565b90509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405161036490610eaa565b60006040518083038185875af1925050503d80600081146103a1576040519150601f19603f3d011682016040523d82523d6000602084013e6103a6565b606091505b50509050806103e1576040517fc6d73c5500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b606061040c8484846040518060600160405280602e8152602001610fdc602e9139610475565b90509392505050565b606061044160148373ffffffffffffffffffffffffffffffffffffffff166105e090919063ffffffff16565b9050919050565b606061046d838360405180606001604052806023815260200161100a60239139610326565b905092915050565b6060478311156104b1576040517fc052e61b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104bd858585856104c7565b9050949350505050565b60606104d285610313565b610508576040517f89c35afc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516105319190610ef0565b60006040518083038185875af1925050503d806000811461056e576040519150601f19603f3d011682016040523d82523d6000602084013e610573565b606091505b509150915081156105885780925050506105d8565b60008151111561059b5780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf9190610d5c565b60405180910390fd5b949350505050565b6060600060028360026105f39190610f36565b6105fd9190610f78565b67ffffffffffffffff811115610616576106156108ec565b5b6040519080825280601f01601f1916602001820160405280156106485781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106106805761067f610fac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106106e4576106e3610fac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002020190505b60018111156107b7577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061075e5761075d610fac565b5b1a60f81b82828151811061077557610774610fac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508060019003905061071f565b50600084146107f2576040517fc913478500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083b82610810565b9050919050565b61084b81610830565b811461085657600080fd5b50565b60008135905061086881610842565b92915050565b60006020828403121561088457610883610806565b5b600061089284828501610859565b91505092915050565b60008115159050919050565b6108b08161089b565b82525050565b60006020820190506108cb60008301846108a7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610924826108db565b810181811067ffffffffffffffff82111715610943576109426108ec565b5b80604052505050565b60006109566107fc565b9050610962828261091b565b919050565b600067ffffffffffffffff821115610982576109816108ec565b5b61098b826108db565b9050602081019050919050565b82818337600083830152505050565b60006109ba6109b584610967565b61094c565b9050828152602081018484840111156109d6576109d56108d6565b5b6109e1848285610998565b509392505050565b600082601f8301126109fe576109fd6108d1565b5b8135610a0e8482602086016109a7565b91505092915050565b600067ffffffffffffffff821115610a3257610a316108ec565b5b610a3b826108db565b9050602081019050919050565b6000610a5b610a5684610a17565b61094c565b905082815260208101848484011115610a7757610a766108d6565b5b610a82848285610998565b509392505050565b600082601f830112610a9f57610a9e6108d1565b5b8135610aaf848260208601610a48565b91505092915050565b600080600060608486031215610ad157610ad0610806565b5b6000610adf86828701610859565b935050602084013567ffffffffffffffff811115610b0057610aff61080b565b5b610b0c868287016109e9565b925050604084013567ffffffffffffffff811115610b2d57610b2c61080b565b5b610b3986828701610a8a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b7d578082015181840152602081019050610b62565b60008484015250505050565b6000610b9482610b43565b610b9e8185610b4e565b9350610bae818560208601610b5f565b610bb7816108db565b840191505092915050565b60006020820190508181036000830152610bdc8184610b89565b905092915050565b6000610bef82610810565b9050919050565b610bff81610be4565b8114610c0a57600080fd5b50565b600081359050610c1c81610bf6565b92915050565b6000819050919050565b610c3581610c22565b8114610c4057600080fd5b50565b600081359050610c5281610c2c565b92915050565b60008060408385031215610c6f57610c6e610806565b5b6000610c7d85828601610c0d565b9250506020610c8e85828601610c43565b9150509250929050565b600080600060608486031215610cb157610cb0610806565b5b6000610cbf86828701610859565b935050602084013567ffffffffffffffff811115610ce057610cdf61080b565b5b610cec868287016109e9565b9250506040610cfd86828701610c43565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000610d2e82610d07565b610d388185610d12565b9350610d48818560208601610b5f565b610d51816108db565b840191505092915050565b60006020820190508181036000830152610d768184610d23565b905092915050565b60008060408385031215610d9557610d94610806565b5b6000610da385828601610859565b925050602083013567ffffffffffffffff811115610dc457610dc361080b565b5b610dd0858286016109e9565b9150509250929050565b60008060008060808587031215610df457610df3610806565b5b6000610e0287828801610859565b945050602085013567ffffffffffffffff811115610e2357610e2261080b565b5b610e2f878288016109e9565b9350506040610e4087828801610c43565b925050606085013567ffffffffffffffff811115610e6157610e6061080b565b5b610e6d87828801610a8a565b91505092959194509250565b600081905092915050565b50565b6000610e94600083610e79565b9150610e9f82610e84565b600082019050919050565b6000610eb582610e87565b9150819050919050565b6000610eca82610b43565b610ed48185610e79565b9350610ee4818560208601610b5f565b80840191505092915050565b6000610efc8284610ebf565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f4182610c22565b9150610f4c83610c22565b9250828202610f5a81610c22565b91508282048414831517610f7157610f70610f07565b5b5092915050565b6000610f8382610c22565b9150610f8e83610c22565b9250828201905080821115610fa657610fa5610f07565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6c20776974682076616c7565416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6ca26469706673582212207aa266b17f3820231a8402ad5dad35fcffe117353782417b0d80e053280cdcb864736f6c634300081b0033";

type AddressUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressUtilsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressUtilsMock__factory extends ContractFactory {
  constructor(...args: AddressUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AddressUtilsMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AddressUtilsMock__factory {
    return super.connect(runner) as AddressUtilsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressUtilsMockInterface {
    return new Interface(_abi) as AddressUtilsMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AddressUtilsMock {
    return new Contract(address, _abi, runner) as unknown as AddressUtilsMock;
  }
}

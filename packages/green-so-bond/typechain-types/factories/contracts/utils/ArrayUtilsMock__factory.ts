/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArrayUtilsMock,
  ArrayUtilsMockInterface,
} from "../../../contracts/utils/ArrayUtilsMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "array",
        type: "uint256[]",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "array",
        type: "bytes32[]",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "array",
        type: "address[]",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "array",
        type: "bytes32[]",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "array",
        type: "address[]",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "array",
        type: "uint256[]",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610a988061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631bfe664d146100675780633bf6de961461009757806377c5ca71146100c757806386d6e594146100f7578063abf91ea414610127578063d834e61914610157575b600080fd5b610081600480360381019061007c91906106c0565b610187565b60405161008e9190610718565b60405180910390f35b6100b160048036038101906100ac919061082c565b610199565b6040516100be9190610884565b60405180910390f35b6100e160048036038101906100dc91906106c0565b6101ab565b6040516100ee9190610718565b60405180910390f35b610111600480360381019061010c91906109c0565b6101bd565b60405161011e9190610a18565b60405180910390f35b610141600480360381019061013c91906109c0565b6101cf565b60405161014e9190610a18565b60405180910390f35b610171600480360381019061016c919061082c565b6101e1565b60405161017e9190610884565b60405180910390f35b6000610192826101f3565b9050919050565b60006101a48261027f565b9050919050565b60006101b6826102e9565b9050919050565b60006101c882610355565b9050919050565b60006101da826103eb565b9050919050565b60006101ec82610494565b9050919050565b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b905060005b8351811015610275578184828151811061023c5761023b610a33565b5b602002602001015110156102685783818151811061025d5761025c610a33565b5b602002602001015191505b808060010191505061021f565b5080915050919050565b6000806000905060005b83518110156102df57818482815181106102a6576102a5610a33565b5b602002602001015111156102d2578381815181106102c7576102c6610a33565b5b602002602001015191505b8080600101915050610289565b5080915050919050565b6000806000801b905060005b835181101561034b578184828151811061031257610311610a33565b5b6020026020010151111561033e5783818151811061033357610332610a33565b5b602002602001015191505b80806001019150506102f5565b5080915050919050565b6000806000905060005b83518110156103e1578173ffffffffffffffffffffffffffffffffffffffff1684828151811061039257610391610a33565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1611156103d4578381815181106103c9576103c8610a33565b5b602002602001015191505b808060010191505061035f565b5080915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff905060005b835181101561048a578173ffffffffffffffffffffffffffffffffffffffff1684828151811061043b5761043a610a33565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16101561047d5783818151811061047257610471610a33565b5b602002602001015191505b8080600101915050610408565b5080915050919050565b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060005b835181101561051357818482815181106104da576104d9610a33565b5b60200260200101511015610506578381815181106104fb576104fa610a33565b5b602002602001015191505b80806001019150506104bd565b5080915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61057f82610536565b810181811067ffffffffffffffff8211171561059e5761059d610547565b5b80604052505050565b60006105b161051d565b90506105bd8282610576565b919050565b600067ffffffffffffffff8211156105dd576105dc610547565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b610606816105f3565b811461061157600080fd5b50565b600081359050610623816105fd565b92915050565b600061063c610637846105c2565b6105a7565b9050808382526020820190506020840283018581111561065f5761065e6105ee565b5b835b8181101561068857806106748882610614565b845260208401935050602081019050610661565b5050509392505050565b600082601f8301126106a7576106a6610531565b5b81356106b7848260208601610629565b91505092915050565b6000602082840312156106d6576106d5610527565b5b600082013567ffffffffffffffff8111156106f4576106f361052c565b5b61070084828501610692565b91505092915050565b610712816105f3565b82525050565b600060208201905061072d6000830184610709565b92915050565b600067ffffffffffffffff82111561074e5761074d610547565b5b602082029050602081019050919050565b6000819050919050565b6107728161075f565b811461077d57600080fd5b50565b60008135905061078f81610769565b92915050565b60006107a86107a384610733565b6105a7565b905080838252602082019050602084028301858111156107cb576107ca6105ee565b5b835b818110156107f457806107e08882610780565b8452602084019350506020810190506107cd565b5050509392505050565b600082601f83011261081357610812610531565b5b8135610823848260208601610795565b91505092915050565b60006020828403121561084257610841610527565b5b600082013567ffffffffffffffff8111156108605761085f61052c565b5b61086c848285016107fe565b91505092915050565b61087e8161075f565b82525050565b60006020820190506108996000830184610875565b92915050565b600067ffffffffffffffff8211156108ba576108b9610547565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108f6826108cb565b9050919050565b610906816108eb565b811461091157600080fd5b50565b600081359050610923816108fd565b92915050565b600061093c6109378461089f565b6105a7565b9050808382526020820190506020840283018581111561095f5761095e6105ee565b5b835b8181101561098857806109748882610914565b845260208401935050602081019050610961565b5050509392505050565b600082601f8301126109a7576109a6610531565b5b81356109b7848260208601610929565b91505092915050565b6000602082840312156109d6576109d5610527565b5b600082013567ffffffffffffffff8111156109f4576109f361052c565b5b610a0084828501610992565b91505092915050565b610a12816108eb565b82525050565b6000602082019050610a2d6000830184610a09565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220fcbabfcc3d1f47798d40379087d6aca47d3d4b965a3f553b02e63dd03a87ea9c64736f6c634300081b0033";

type ArrayUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArrayUtilsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArrayUtilsMock__factory extends ContractFactory {
  constructor(...args: ArrayUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArrayUtilsMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ArrayUtilsMock__factory {
    return super.connect(runner) as ArrayUtilsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArrayUtilsMockInterface {
    return new Interface(_abi) as ArrayUtilsMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ArrayUtilsMock {
    return new Contract(address, _abi, runner) as unknown as ArrayUtilsMock;
  }
}

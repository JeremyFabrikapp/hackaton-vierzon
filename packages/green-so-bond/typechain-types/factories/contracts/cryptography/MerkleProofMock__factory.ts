/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MerkleProofMock,
  MerkleProofMockInterface,
} from "../../../contracts/cryptography/MerkleProofMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506104208061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635a9a49c714610030575b600080fd5b61004a600480360381019061004591906102c9565b610060565b6040516100579190610353565b60405180910390f35b600061006d848484610076565b90509392505050565b60008082905060005b855181101561011857600086828151811061009d5761009c61036e565b5b602002602001015190508083116100de5782816040516020016100c19291906103be565b60405160208183030381529060405280519060200120925061010a565b80836040516020016100f19291906103be565b6040516020818303038152906040528051906020012092505b50808060010191505061007f565b508381149150509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101888261013f565b810181811067ffffffffffffffff821117156101a7576101a6610150565b5b80604052505050565b60006101ba610126565b90506101c6828261017f565b919050565b600067ffffffffffffffff8211156101e6576101e5610150565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61020f816101fc565b811461021a57600080fd5b50565b60008135905061022c81610206565b92915050565b6000610245610240846101cb565b6101b0565b90508083825260208201905060208402830185811115610268576102676101f7565b5b835b81811015610291578061027d888261021d565b84526020840193505060208101905061026a565b5050509392505050565b600082601f8301126102b0576102af61013a565b5b81356102c0848260208601610232565b91505092915050565b6000806000606084860312156102e2576102e1610130565b5b600084013567ffffffffffffffff811115610300576102ff610135565b5b61030c8682870161029b565b935050602061031d8682870161021d565b925050604061032e8682870161021d565b9150509250925092565b60008115159050919050565b61034d81610338565b82525050565b60006020820190506103686000830184610344565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6103b86103b3826101fc565b61039d565b82525050565b60006103ca82856103a7565b6020820191506103da82846103a7565b602082019150819050939250505056fea264697066735822122086e0ef411b3ab5a12aee694e0d7f9c2101161eb4dd08ede28b236bd5d9a23a2f64736f6c634300081b0033";

type MerkleProofMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleProofMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProofMock__factory extends ContractFactory {
  constructor(...args: MerkleProofMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MerkleProofMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MerkleProofMock__factory {
    return super.connect(runner) as MerkleProofMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofMockInterface {
    return new Interface(_abi) as MerkleProofMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MerkleProofMock {
    return new Contract(address, _abi, runner) as unknown as MerkleProofMock;
  }
}

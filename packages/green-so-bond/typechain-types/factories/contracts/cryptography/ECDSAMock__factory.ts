/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ECDSAMock,
  ECDSAMockInterface,
} from "../../../contracts/cryptography/ECDSAMock";

const _abi = [
  {
    inputs: [],
    name: "ECDSA__InvalidS",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSA__InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSA__InvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSA__InvalidV",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "recover",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "toEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5061078f8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806319045a2514610046578063918a15cf14610076578063c2bf17b0146100a6575b600080fd5b610060600480360381019061005b91906104b8565b6100d6565b60405161006d9190610555565b60405180910390f35b610090600480360381019061008b9190610570565b6100ea565b60405161009d91906105ac565b60405180910390f35b6100c060048036038101906100bb9190610600565b6100fc565b6040516100cd9190610555565b60405180910390f35b60006100e28383610114565b905092915050565b60006100f582610185565b9050919050565b600061010a858585856101b5565b9050949350505050565b60006041825114610151576040517f4fc237b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060006020850151925060408501519150606085015160001a905061017a868285856101b5565b935050505092915050565b60008160405160200161019891906106df565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115610214576040517fe4a61add00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601b8460ff161415801561022c5750601c8460ff1614155b15610263576040517facd54a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600186868686604051600081526020016040526040516102889493929190610714565b6020604051602081039080840390855afa1580156102aa573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361031c576040517f8fe7664e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050949350505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61034f8161033c565b811461035a57600080fd5b50565b60008135905061036c81610346565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103c58261037c565b810181811067ffffffffffffffff821117156103e4576103e361038d565b5b80604052505050565b60006103f7610328565b905061040382826103bc565b919050565b600067ffffffffffffffff8211156104235761042261038d565b5b61042c8261037c565b9050602081019050919050565b82818337600083830152505050565b600061045b61045684610408565b6103ed565b90508281526020810184848401111561047757610476610377565b5b610482848285610439565b509392505050565b600082601f83011261049f5761049e610372565b5b81356104af848260208601610448565b91505092915050565b600080604083850312156104cf576104ce610332565b5b60006104dd8582860161035d565b925050602083013567ffffffffffffffff8111156104fe576104fd610337565b5b61050a8582860161048a565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053f82610514565b9050919050565b61054f81610534565b82525050565b600060208201905061056a6000830184610546565b92915050565b60006020828403121561058657610585610332565b5b60006105948482850161035d565b91505092915050565b6105a68161033c565b82525050565b60006020820190506105c1600083018461059d565b92915050565b600060ff82169050919050565b6105dd816105c7565b81146105e857600080fd5b50565b6000813590506105fa816105d4565b92915050565b6000806000806080858703121561061a57610619610332565b5b60006106288782880161035d565b9450506020610639878288016105eb565b935050604061064a8782880161035d565b925050606061065b8782880161035d565b91505092959194509250565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006106a8601c83610667565b91506106b382610672565b601c82019050919050565b6000819050919050565b6106d96106d48261033c565b6106be565b82525050565b60006106ea8261069b565b91506106f682846106c8565b60208201915081905092915050565b61070e816105c7565b82525050565b6000608082019050610729600083018761059d565b6107366020830186610705565b610743604083018561059d565b610750606083018461059d565b9594505050505056fea2646970667358221220d4d3c4b49656194dc89e021670fc01d64d119b99a533e264290c012063b3015564736f6c634300081b0033";

type ECDSAMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAMock__factory extends ContractFactory {
  constructor(...args: ECDSAMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ECDSAMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ECDSAMock__factory {
    return super.connect(runner) as ECDSAMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAMockInterface {
    return new Interface(_abi) as ECDSAMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ECDSAMock {
    return new Contract(address, _abi, runner) as unknown as ECDSAMock;
  }
}
